import ccxt
import talib
import numpy as np
import logging
from datetime import datetime
import time
import requests
import threading
import yfinance as yf
import pandas as pd
import json
import os
from pathlib import Path
from dotenv import load_dotenv

# Load environment variables
load_dotenv()

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi Binance mainnet (spot)
exchange = ccxt.binance({
    'enableRateLimit': True,
    'options': {
        'defaultType': 'spot',
        'adjustForTimeDifference': True,
    }
})

# Kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi Exness cho h√†ng h√≥a (t·∫°m th·ªùi comment l·∫°i)
# exness_exchange = ccxt.exness({
#     'enableRateLimit': True,
#     'options': {
#         'defaultType': 'spot',
#         'adjustForTimeDifference': True,
#     }
# })
exness_exchange = None  # T·∫°m th·ªùi kh√¥ng s·ª≠ d·ª•ng Exness

# C·∫•u h√¨nh cho TradingView v√† Investing.com
TRADINGVIEW_SYMBOLS = {
    'XAU/USD': 'XAUUSD',  # V√†ng
    'WTI/USD': 'USOIL'    # D·∫ßu WTI
}

INVESTING_SYMBOLS = {
    'XAU/USD': 'gold',    # V√†ng tr√™n Investing.com
    'WTI/USD': 'wti-crude-oil'  # D·∫ßu WTI tr√™n Investing.com
}

# C·∫•u h√¨nh cho Exness
EXNESS_SYMBOLS = {
    'XAU/USD': 'XAUUSD',  # V√†ng tr√™n Exness
    'WTI/USD': 'WTIUSD'   # D·∫ßu WTI tr√™n Exness
}

# C·∫•u h√¨nh
SYMBOLS = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'XAU/USD', 'WTI/USD']
TIMEFRAMES = ['1h', '2h', '4h', '6h', '8h', '12h', '1d', '3d', '1w']
CANDLE_LIMIT = 200
SIGNAL_THRESHOLD = 0.6 # Gi·∫£m xu·ªëng 40% ƒë·ªÉ d·ªÖ c√≥ t√≠n hi·ªáu h∆°n
RETRY_ATTEMPTS = 2

# C·∫•u h√¨nh Telegram
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7496162935:AAGncIsO4q18cOWRGpK0vYb_5zWxYNEgWKQ")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "1866335373")
TELEGRAM_REPORT_INTERVAL = 7200  # 2 ti·∫øng = 7200 gi√¢y

# C·∫•u h√¨nh cho h·ªá th·ªëng theo d√µi d·ª± ƒëo√°n
PREDICTION_DATA_DIR = "prediction_data"
PREDICTION_HISTORY_FILE = "prediction_history.json"
PREDICTION_ACCURACY_FILE = "prediction_accuracy.json"
PREDICTION_UPDATE_INTERVAL = 3600  # C·∫≠p nh·∫≠t k·∫øt qu·∫£ th·ª±c t·∫ø m·ªói gi·ªù
PREDICTION_RETENTION_DAYS = 30  # Gi·ªØ d·ªØ li·ªáu d·ª± ƒëo√°n trong 30 ng√†y

def get_usdt_symbols():
    """Tr·∫£ v·ªÅ danh s√°ch c·∫∑p giao d·ªãch c·ªë ƒë·ªãnh bao g·ªìm crypto, v√†ng v√† d·∫ßu"""
    return SYMBOLS

def ensure_prediction_data_dir():
    """ƒê·∫£m b·∫£o th∆∞ m·ª•c d·ªØ li·ªáu d·ª± ƒëo√°n t·ªìn t·∫°i"""
    Path(PREDICTION_DATA_DIR).mkdir(exist_ok=True)

def save_prediction(symbol, timeframe, prediction_data, current_price):
    """L∆∞u d·ª± ƒëo√°n m·ªõi v√†o h·ªá th·ªëng"""
    try:
        ensure_prediction_data_dir()
        
        prediction = {
            'id': f"{symbol}_{timeframe}_{int(time.time())}",
            'symbol': symbol,
            'timeframe': timeframe,
            'timestamp': datetime.now().isoformat(),
            'current_price': current_price,
            'prediction': {
                'trend': prediction_data.get('trend', 'neutral'),
                'signal': prediction_data.get('signal', 'Hold'),
                'confidence': prediction_data.get('confidence', 0),
                'entry_price': prediction_data.get('entry_points', {}).get('entry_price', current_price),
                'stop_loss': prediction_data.get('entry_points', {}).get('stop_loss', 0),
                'take_profit': prediction_data.get('entry_points', {}).get('take_profit', 0),
                'risk_reward_ratio': prediction_data.get('entry_points', {}).get('risk_reward_ratio', 0),
                'analysis_summary': prediction_data.get('analysis_summary', ''),
                'technical_signals': prediction_data.get('technical_signals', {}),
                'commodity_signals': prediction_data.get('commodity_signals', {}),
                'smc_signals': prediction_data.get('smc_signals', {}),
                'price_action_signals': prediction_data.get('price_action_signals', {})
            },
            'actual_result': None,
            'accuracy': None,
            'status': 'pending'
        }
        
        # ƒê·ªçc d·ªØ li·ªáu hi·ªán t·∫°i
        history_file = os.path.join(PREDICTION_DATA_DIR, PREDICTION_HISTORY_FILE)
        if os.path.exists(history_file):
            with open(history_file, 'r', encoding='utf-8') as f:
                history = json.load(f)
        else:
            history = []
        
        # Th√™m d·ª± ƒëo√°n m·ªõi
        history.append(prediction)
        
        # L∆∞u l·∫°i
        with open(history_file, 'w', encoding='utf-8') as f:
            json.dump(history, f, ensure_ascii=False, indent=2)
        
        logger.info(f"‚úÖ ƒê√£ l∆∞u d·ª± ƒëo√°n cho {symbol} ({timeframe}): {prediction['prediction']['signal']}")
        return prediction['id']
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l∆∞u d·ª± ƒëo√°n: {e}")
        return None

def update_prediction_results():
    """C·∫≠p nh·∫≠t k·∫øt qu·∫£ th·ª±c t·∫ø cho c√°c d·ª± ƒëo√°n ƒëang ch·ªù"""
    try:
        ensure_prediction_data_dir()
        history_file = os.path.join(PREDICTION_DATA_DIR, PREDICTION_HISTORY_FILE)
        
        if not os.path.exists(history_file):
            return
        
        with open(history_file, 'r', encoding='utf-8') as f:
            history = json.load(f)
        
        updated = False
        current_time = datetime.now()
        
        for prediction in history:
            if prediction['status'] != 'pending':
                continue
            
            # Ki·ªÉm tra xem ƒë√£ ƒë·∫øn l√∫c c·∫≠p nh·∫≠t ch∆∞a (d·ª±a tr√™n timeframe)
            prediction_time = datetime.fromisoformat(prediction['timestamp'])
            timeframe = prediction['timeframe']
            
            # T√≠nh th·ªùi gian c·∫ßn thi·∫øt ƒë·ªÉ ƒë√°nh gi√° d·ª± ƒëo√°n
            evaluation_time = get_evaluation_time(timeframe)
            if (current_time - prediction_time).total_seconds() < evaluation_time:
                continue
            
            # L·∫•y gi√° hi·ªán t·∫°i
            current_price = get_current_price_for_prediction(prediction['symbol'])
            if current_price is None:
                continue
            
            # T√≠nh to√°n k·∫øt qu·∫£ th·ª±c t·∫ø
            actual_result = calculate_actual_result(
                prediction['prediction'],
                prediction['current_price'],
                current_price,
                timeframe
            )
            
            # C·∫≠p nh·∫≠t d·ª± ƒëo√°n
            prediction['actual_result'] = actual_result
            prediction['accuracy'] = calculate_prediction_accuracy(
                prediction['prediction'],
                actual_result
            )
            prediction['status'] = 'completed'
            updated = True
            
            logger.info(f"üìä C·∫≠p nh·∫≠t k·∫øt qu·∫£ {prediction['symbol']}: {actual_result['outcome']} (ƒê·ªô ch√≠nh x√°c: {prediction['accuracy']:.1%})")
        
        if updated:
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(history, f, ensure_ascii=False, indent=2)
            
            # C·∫≠p nh·∫≠t th·ªëng k√™ ƒë·ªô ch√≠nh x√°c
            update_accuracy_statistics()
    
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t k·∫øt qu·∫£ d·ª± ƒëo√°n: {e}")

def get_evaluation_time(timeframe):
    """T√≠nh th·ªùi gian c·∫ßn thi·∫øt ƒë·ªÉ ƒë√°nh gi√° d·ª± ƒëo√°n d·ª±a tr√™n timeframe"""
    timeframe_hours = {
        '1h': 2,    # ƒê√°nh gi√° sau 2 gi·ªù
        '2h': 4,    # ƒê√°nh gi√° sau 4 gi·ªù
        '4h': 8,    # ƒê√°nh gi√° sau 8 gi·ªù
        '6h': 12,   # ƒê√°nh gi√° sau 12 gi·ªù
        '8h': 16,   # ƒê√°nh gi√° sau 16 gi·ªù
        '12h': 24,  # ƒê√°nh gi√° sau 24 gi·ªù
        '1d': 48,   # ƒê√°nh gi√° sau 48 gi·ªù
        '3d': 144,  # ƒê√°nh gi√° sau 6 ng√†y
        '1w': 336   # ƒê√°nh gi√° sau 14 ng√†y
    }
    return timeframe_hours.get(timeframe, 24) * 3600  # Chuy·ªÉn sang gi√¢y

def get_current_price_for_prediction(symbol):
    """L·∫•y gi√° hi·ªán t·∫°i cho vi·ªác c·∫≠p nh·∫≠t d·ª± ƒëo√°n"""
    try:
        if symbol in ['XAU/USD', 'WTI/USD']:
            return get_commodity_current_price(symbol)
        else:
            ticker = exchange.fetch_ticker(symbol)
            return ticker['last']
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y gi√° hi·ªán t·∫°i cho {symbol}: {e}")
        return None

def calculate_actual_result(prediction, initial_price, current_price, timeframe):
    """T√≠nh to√°n k·∫øt qu·∫£ th·ª±c t·∫ø c·ªßa d·ª± ƒëo√°n"""
    price_change = (current_price - initial_price) / initial_price
    price_change_percent = price_change * 100
    
    # L·∫•y th√¥ng tin d·ª± ƒëo√°n
    predicted_trend = prediction.get('trend', 'neutral')
    predicted_signal = prediction.get('signal', 'Hold')
    entry_price = prediction.get('entry_price', initial_price)
    stop_loss = prediction.get('stop_loss', 0)
    take_profit = prediction.get('take_profit', 0)
    
    # X√°c ƒë·ªãnh k·∫øt qu·∫£
    if predicted_signal == 'Long':
        if current_price > entry_price:
            if take_profit > 0 and current_price >= take_profit:
                outcome = 'take_profit_hit'
            else:
                outcome = 'profitable'
        elif stop_loss > 0 and current_price <= stop_loss:
            outcome = 'stop_loss_hit'
        else:
            outcome = 'loss'
    elif predicted_signal == 'Short':
        if current_price < entry_price:
            if take_profit > 0 and current_price <= take_profit:
                outcome = 'take_profit_hit'
            else:
                outcome = 'profitable'
        elif stop_loss > 0 and current_price >= stop_loss:
            outcome = 'stop_loss_hit'
        else:
            outcome = 'loss'
    else:  # Hold
        if abs(price_change) < 0.01:  # Thay ƒë·ªïi < 1%
            outcome = 'correct_hold'
        else:
            outcome = 'missed_opportunity'
    
    return {
        'current_price': current_price,
        'price_change': price_change,
        'price_change_percent': price_change_percent,
        'outcome': outcome,
        'profit_loss': current_price - entry_price if entry_price > 0 else 0,
        'profit_loss_percent': ((current_price - entry_price) / entry_price * 100) if entry_price > 0 else 0
    }

def calculate_prediction_accuracy(prediction, actual_result):
    """T√≠nh to√°n ƒë·ªô ch√≠nh x√°c c·ªßa d·ª± ƒëo√°n"""
    predicted_signal = prediction.get('signal', 'Hold')
    outcome = actual_result.get('outcome', 'unknown')
    
    # ƒê·ªãnh nghƒ©a ƒë·ªô ch√≠nh x√°c
    accuracy_map = {
        'Long': {
            'profitable': 1.0,
            'take_profit_hit': 1.0,
            'stop_loss_hit': 0.0,
            'loss': 0.0
        },
        'Short': {
            'profitable': 1.0,
            'take_profit_hit': 1.0,
            'stop_loss_hit': 0.0,
            'loss': 0.0
        },
        'Hold': {
            'correct_hold': 1.0,
            'missed_opportunity': 0.5
        }
    }
    
    return accuracy_map.get(predicted_signal, {}).get(outcome, 0.0)

def update_accuracy_statistics():
    """C·∫≠p nh·∫≠t th·ªëng k√™ ƒë·ªô ch√≠nh x√°c t·ªïng th·ªÉ"""
    try:
        history_file = os.path.join(PREDICTION_DATA_DIR, PREDICTION_HISTORY_FILE)
        accuracy_file = os.path.join(PREDICTION_DATA_DIR, PREDICTION_ACCURACY_FILE)
        
        if not os.path.exists(history_file):
            return
        
        with open(history_file, 'r', encoding='utf-8') as f:
            history = json.load(f)
        
        # L·ªçc c√°c d·ª± ƒëo√°n ƒë√£ ho√†n th√†nh
        completed_predictions = [p for p in history if p['status'] == 'completed']
        
        if not completed_predictions:
            return
        
        # T√≠nh to√°n th·ªëng k√™
        total_predictions = len(completed_predictions)
        accurate_predictions = len([p for p in completed_predictions if p['accuracy'] >= 0.8])
        overall_accuracy = accurate_predictions / total_predictions if total_predictions > 0 else 0
        
        # Th·ªëng k√™ theo symbol
        symbol_stats = {}
        for prediction in completed_predictions:
            symbol = prediction['symbol']
            if symbol not in symbol_stats:
                symbol_stats[symbol] = {'total': 0, 'accurate': 0, 'accuracy': 0}
            
            symbol_stats[symbol]['total'] += 1
            if prediction['accuracy'] >= 0.8:
                symbol_stats[symbol]['accurate'] += 1
        
        # T√≠nh ƒë·ªô ch√≠nh x√°c cho t·ª´ng symbol
        for symbol in symbol_stats:
            stats = symbol_stats[symbol]
            stats['accuracy'] = stats['accurate'] / stats['total'] if stats['total'] > 0 else 0
        
        # Th·ªëng k√™ theo timeframe
        timeframe_stats = {}
        for prediction in completed_predictions:
            timeframe = prediction['timeframe']
            if timeframe not in timeframe_stats:
                timeframe_stats[timeframe] = {'total': 0, 'accurate': 0, 'accuracy': 0}
            
            timeframe_stats[timeframe]['total'] += 1
            if prediction['accuracy'] >= 0.8:
                timeframe_stats[timeframe]['accurate'] += 1
        
        # T√≠nh ƒë·ªô ch√≠nh x√°c cho t·ª´ng timeframe
        for timeframe in timeframe_stats:
            stats = timeframe_stats[timeframe]
            stats['accuracy'] = stats['accurate'] / stats['total'] if stats['total'] > 0 else 0
        
        # L∆∞u th·ªëng k√™
        accuracy_data = {
            'last_updated': datetime.now().isoformat(),
            'overall': {
                'total_predictions': total_predictions,
                'accurate_predictions': accurate_predictions,
                'accuracy': overall_accuracy
            },
            'by_symbol': symbol_stats,
            'by_timeframe': timeframe_stats
        }
        
        with open(accuracy_file, 'w', encoding='utf-8') as f:
            json.dump(accuracy_data, f, ensure_ascii=False, indent=2)
        
        logger.info(f"üìà ƒê√£ c·∫≠p nh·∫≠t th·ªëng k√™ ƒë·ªô ch√≠nh x√°c: {overall_accuracy:.1%} ({accurate_predictions}/{total_predictions})")
    
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi c·∫≠p nh·∫≠t th·ªëng k√™ ƒë·ªô ch√≠nh x√°c: {e}")

def get_prediction_accuracy_data():
    """L·∫•y d·ªØ li·ªáu ƒë·ªô ch√≠nh x√°c d·ª± ƒëo√°n"""
    try:
        accuracy_file = os.path.join(PREDICTION_DATA_DIR, PREDICTION_ACCURACY_FILE)
        if os.path.exists(accuracy_file):
            with open(accuracy_file, 'r', encoding='utf-8') as f:
                return json.load(f)
        return None
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ƒë·ªçc d·ªØ li·ªáu ƒë·ªô ch√≠nh x√°c: {e}")
        return None

def cleanup_old_predictions():
    """D·ªçn d·∫πp c√°c d·ª± ƒëo√°n c≈©"""
    try:
        history_file = os.path.join(PREDICTION_DATA_DIR, PREDICTION_HISTORY_FILE)
        if not os.path.exists(history_file):
            return
        
        with open(history_file, 'r', encoding='utf-8') as f:
            history = json.load(f)
        
        current_time = datetime.now()
        cutoff_time = current_time.timestamp() - (PREDICTION_RETENTION_DAYS * 24 * 3600)
        
        # L·ªçc b·ªè c√°c d·ª± ƒëo√°n c≈©
        filtered_history = []
        removed_count = 0
        
        for prediction in history:
            prediction_timestamp = datetime.fromisoformat(prediction['timestamp']).timestamp()
            if prediction_timestamp > cutoff_time:
                filtered_history.append(prediction)
            else:
                removed_count += 1
        
        if removed_count > 0:
            with open(history_file, 'w', encoding='utf-8') as f:
                json.dump(filtered_history, f, ensure_ascii=False, indent=2)
            
            logger.info(f"üßπ ƒê√£ d·ªçn d·∫πp {removed_count} d·ª± ƒëo√°n c≈©")
    
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi d·ªçn d·∫πp d·ª± ƒëo√°n c≈©: {e}")

def adjust_analysis_based_on_accuracy(analysis_result, symbol, timeframe):
    """ƒêi·ªÅu ch·ªânh ph√¢n t√≠ch d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c l·ªãch s·ª≠"""
    try:
        accuracy_data = get_prediction_accuracy_data()
        if not accuracy_data:
            return analysis_result
        
        # L·∫•y ƒë·ªô ch√≠nh x√°c cho symbol v√† timeframe
        symbol_accuracy = accuracy_data.get('by_symbol', {}).get(symbol, {}).get('accuracy', 0.5)
        timeframe_accuracy = accuracy_data.get('by_timeframe', {}).get(timeframe, {}).get('accuracy', 0.5)
        
        # T√≠nh ƒë·ªô ch√≠nh x√°c trung b√¨nh
        avg_accuracy = (symbol_accuracy + timeframe_accuracy) / 2
        
        # ƒêi·ªÅu ch·ªânh confidence d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c
        current_confidence = analysis_result.get('confidence', 0.5)
        
        if avg_accuracy > 0.7:  # ƒê·ªô ch√≠nh x√°c cao
            adjusted_confidence = min(current_confidence * 1.2, 1.0)
            analysis_result['confidence'] = adjusted_confidence
            analysis_result['accuracy_adjustment'] = f"TƒÉng confidence do ƒë·ªô ch√≠nh x√°c cao ({avg_accuracy:.1%})"
        elif avg_accuracy < 0.4:  # ƒê·ªô ch√≠nh x√°c th·∫•p
            adjusted_confidence = max(current_confidence * 0.8, 0.1)
            analysis_result['confidence'] = adjusted_confidence
            analysis_result['accuracy_adjustment'] = f"Gi·∫£m confidence do ƒë·ªô ch√≠nh x√°c th·∫•p ({avg_accuracy:.1%})"
        else:
            analysis_result['accuracy_adjustment'] = f"ƒê·ªô ch√≠nh x√°c trung b√¨nh ({avg_accuracy:.1%})"
        
        # Th√™m th√¥ng tin ƒë·ªô ch√≠nh x√°c v√†o analysis
        analysis_result['historical_accuracy'] = {
            'symbol_accuracy': symbol_accuracy,
            'timeframe_accuracy': timeframe_accuracy,
            'average_accuracy': avg_accuracy
        }
        
        return analysis_result
    
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi ƒëi·ªÅu ch·ªânh ph√¢n t√≠ch: {e}")
        return analysis_result

def send_prediction_accuracy_report():
    """G·ª≠i b√°o c√°o ƒë·ªô ch√≠nh x√°c d·ª± ƒëo√°n qua Telegram"""
    try:
        accuracy_report = format_prediction_accuracy_report()
        if send_telegram_message(accuracy_report):
            logger.info("üìä ƒê√£ g·ª≠i b√°o c√°o ƒë·ªô ch√≠nh x√°c d·ª± ƒëo√°n qua Telegram")
            return True
        else:
            logger.error("‚ùå Kh√¥ng th·ªÉ g·ª≠i b√°o c√°o ƒë·ªô ch√≠nh x√°c d·ª± ƒëo√°n")
            return False
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi g·ª≠i b√°o c√°o ƒë·ªô ch√≠nh x√°c: {e}")
        return False

def fetch_commodity_data(symbol, timeframe, limit):
    """L·∫•y d·ªØ li·ªáu h√†ng h√≥a t·ª´ Yahoo Finance, TradingView v√† Investing.com"""
    try:
        # Th·ª≠ Yahoo Finance tr∆∞·ªõc (∆∞u ti√™n cao nh·∫•t)
        yf_data = fetch_yahoo_finance_data(symbol, timeframe, limit)
        if yf_data:
            logger.info(f"‚úÖ L·∫•y d·ªØ li·ªáu {symbol} t·ª´ Yahoo Finance th√†nh c√¥ng")
            return yf_data
        
        # Th·ª≠ TradingView n·∫øu Yahoo Finance th·∫•t b·∫°i
        tv_data = fetch_tradingview_data(symbol, timeframe, limit)
        if tv_data:
            logger.info(f"‚úÖ L·∫•y d·ªØ li·ªáu {symbol} t·ª´ TradingView th√†nh c√¥ng")
            return tv_data
        
        # N·∫øu TradingView th·∫•t b·∫°i, th·ª≠ Investing.com
        investing_data = fetch_investing_data(symbol, timeframe, limit)
        if investing_data:
            logger.info(f"‚úÖ L·∫•y d·ªØ li·ªáu {symbol} t·ª´ Investing.com th√†nh c√¥ng")
            return investing_data
        
        logger.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho {symbol} t·ª´ b·∫•t k·ª≥ ngu·ªìn n√†o")
        return None
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y d·ªØ li·ªáu h√†ng h√≥a cho {symbol}: {e}")
        return None



def fetch_tradingview_data(symbol, timeframe, limit):
    """L·∫•y d·ªØ li·ªáu t·ª´ TradingView"""
    try:
        tv_symbol = TRADINGVIEW_SYMBOLS.get(symbol)
        if not tv_symbol:
            return None
        
        # Chuy·ªÉn ƒë·ªïi timeframe
        interval_map = {
            '1h': '1',
            '2h': '2', 
            '4h': '4',
            '6h': '6',
            '8h': '8',
            '12h': '12',
            '1d': '1D',
            '3d': '3D',
            '1w': '1W'
        }
        
        interval = interval_map.get(timeframe, '1D')
        
        # S·ª≠ d·ª•ng TradingView API (c·∫ßn c√†i ƒë·∫∑t tradingview-ta)
        try:
            from tradingview_ta import TA_Handler, Interval
            handler = TA_Handler(
                symbol=tv_symbol,
                exchange="OANDA",
                screener="forex",
                interval=interval,
                timeout=10
            )
            
            # L·∫•y d·ªØ li·ªáu OHLCV
            analysis = handler.get_analysis()
            if analysis and hasattr(analysis, 'indicators'):
                # T·∫°o d·ªØ li·ªáu gi·∫£ l·∫≠p t·ª´ indicators
                # TradingView API ch·ªâ tr·∫£ v·ªÅ indicators, kh√¥ng ph·∫£i OHLCV
                # N√™n ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng Yahoo Finance thay th·∫ø
                return None
                
        except ImportError:
            logger.warning("TradingView TA library ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t")
            return None
            
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu TradingView cho {symbol}: {e}")
        return None

def fetch_investing_data(symbol, timeframe, limit):
    """L·∫•y d·ªØ li·ªáu t·ª´ Investing.com"""
    try:
        investing_symbol = INVESTING_SYMBOLS.get(symbol)
        if not investing_symbol:
            return None
        
        # Investing.com kh√¥ng c√≥ API c√¥ng khai, n√™n ch√∫ng ta s·∫Ω s·ª≠ d·ª•ng Yahoo Finance
        # ho·∫∑c web scraping (c·∫ßn th√™m th∆∞ vi·ªán)
        return None
        
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu Investing.com cho {symbol}: {e}")
        return None

def fetch_yahoo_finance_data(symbol, timeframe, limit):
    """L·∫•y d·ªØ li·ªáu t·ª´ Yahoo Finance (fallback)"""
    try:
        # Map symbols cho Yahoo Finance
        yf_symbols = {
            'XAU/USD': 'GC=F',  # Gold Futures
            'WTI/USD': 'CL=F'   # Crude Oil Futures
        }
        
        yf_symbol = yf_symbols.get(symbol)
        if not yf_symbol:
            return None
        
        # Chuy·ªÉn ƒë·ªïi timeframe - s·ª≠ d·ª•ng c√°c interval ƒë∆∞·ª£c Yahoo Finance h·ªó tr·ª£
        period_map = {
            '1h': '5d',
            '2h': '5d', 
            '4h': '5d',
            '6h': '5d',
            '8h': '5d',
            '12h': '5d',
            '1d': '1mo',
            '3d': '3mo',
            '1w': '6mo'
        }
        
        interval_map = {
            '1h': '1h',
            '2h': '1h',  # Yahoo Finance kh√¥ng h·ªó tr·ª£ 2h, d√πng 1h
            '4h': '1h',  # Yahoo Finance kh√¥ng h·ªó tr·ª£ 4h, d√πng 1h
            '6h': '1h',  # Yahoo Finance kh√¥ng h·ªó tr·ª£ 6h, d√πng 1h
            '8h': '1h',  # Yahoo Finance kh√¥ng h·ªó tr·ª£ 8h, d√πng 1h
            '12h': '1h', # Yahoo Finance kh√¥ng h·ªó tr·ª£ 12h, d√πng 1h
            '1d': '1d',
            '3d': '1d',  # Yahoo Finance kh√¥ng h·ªó tr·ª£ 3d, d√πng 1d
            '1w': '1wk'
        }
        
        period = period_map.get(timeframe, '1mo')
        interval = interval_map.get(timeframe, '1d')
        
        # L·∫•y d·ªØ li·ªáu t·ª´ Yahoo Finance
        ticker = yf.Ticker(yf_symbol)
        data = ticker.history(period=period, interval=interval)
        
        logger.info(f"üìä Yahoo Finance: L·∫•y {len(data)} d√≤ng d·ªØ li·ªáu cho {symbol} ({period}, {interval})")
        
        if data.empty:
            logger.warning(f"Kh√¥ng c√≥ d·ªØ li·ªáu cho {symbol} t·ª´ Yahoo Finance")
            return None
        
        # Chuy·ªÉn ƒë·ªïi sang format OHLCV
        ohlcv = []
        for index, row in data.tail(limit).iterrows():
            ohlcv.append({
                'timestamp': int(index.timestamp() * 1000),
                'open': float(row['Open']),
                'high': float(row['High']), 
                'low': float(row['Low']),
                'close': float(row['Close']),
                'volume': float(row['Volume']) if 'Volume' in row and not np.isnan(row['Volume']) else 1000000.0  # Volume m·∫∑c ƒë·ªãnh
            })
        
        return ohlcv
        
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y d·ªØ li·ªáu Yahoo Finance cho {symbol}: {e}")
        return None

def get_commodity_current_price(symbol):
    """L·∫•y gi√° hi·ªán t·∫°i cho h√†ng h√≥a t·ª´ Yahoo Finance"""
    try:
        # S·ª≠ d·ª•ng Yahoo Finance
        yf_symbols = {
            'XAU/USD': 'GC=F',  # Gold Futures
            'WTI/USD': 'CL=F'   # Crude Oil Futures
        }
        
        yf_symbol = yf_symbols.get(symbol)
        if not yf_symbol:
            return None
        
        # L·∫•y th√¥ng tin ticker
        ticker = yf.Ticker(yf_symbol)
        info = ticker.info
        
        # L·∫•y gi√° hi·ªán t·∫°i
        current_price = info.get('regularMarketPrice')
        if current_price:
            logger.info(f"‚úÖ Th√†nh c√¥ng l·∫•y gi√° {symbol} t·ª´ Yahoo Finance: ${current_price}")
            return current_price
        
        # Fallback: l·∫•y t·ª´ l·ªãch s·ª≠ g·∫ßn nh·∫•t
        data = ticker.history(period='1d')
        if not data.empty:
            current_price = data['Close'].iloc[-1]
            logger.info(f"‚úÖ Th√†nh c√¥ng l·∫•y gi√° {symbol} t·ª´ l·ªãch s·ª≠ Yahoo Finance: ${current_price}")
            return current_price
        
        return None
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói khi l·∫•y gi√° hi·ªán t·∫°i cho {symbol}: {e}")
        return None

def fetch_ohlcv(symbol, timeframe, limit):
    """L·∫•y d·ªØ li·ªáu OHLCV cho crypto, v√†ng v√† d·∫ßu"""
    for attempt in range(RETRY_ATTEMPTS):
        try:
            # X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho v√†ng v√† d·∫ßu - s·ª≠ d·ª•ng Yahoo Finance/TradingView/Investing
            if symbol in ['XAU/USD', 'WTI/USD']:
                ohlcv = fetch_commodity_data(symbol, timeframe, limit)
                logger.info(f"üîç Commodity data for {symbol}: {len(ohlcv) if ohlcv else 0} candles, need {limit * 0.8}")
                if ohlcv and len(ohlcv) >= limit * 0.8:
                    logger.info(f"‚úÖ Th√†nh c√¥ng l·∫•y d·ªØ li·ªáu {symbol} t·ª´ Yahoo Finance/TradingView/Investing")
                    return {
                        'open': np.array([candle['open'] for candle in ohlcv]),
                        'high': np.array([candle['high'] for candle in ohlcv]),
                        'low': np.array([candle['low'] for candle in ohlcv]),
                        'close': np.array([candle['close'] for candle in ohlcv]),
                        'volume': np.array([candle['volume'] for candle in ohlcv])
                    }
                else:
                    logger.warning(f"‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho {symbol} t·ª´ Yahoo Finance/TradingView/Investing")
                    return None
            else:
                # X·ª≠ l√Ω b√¨nh th∆∞·ªùng cho crypto
                ohlcv = exchange.fetch_ohlcv(symbol, timeframe, limit=limit)
            
            if len(ohlcv) < limit * 0.8:
                logger.warning(f"‚ö†Ô∏è D·ªØ li·ªáu OHLCV cho {symbol} ({timeframe}) kh√¥ng ƒë·ªß: {len(ohlcv)}/{limit}")
                return None
                
            return {
                'open': np.array([candle[1] for candle in ohlcv]),
                'high': np.array([candle[2] for candle in ohlcv]),
                'low': np.array([candle[3] for candle in ohlcv]),
                'close': np.array([candle[4] for candle in ohlcv]),
                'volume': np.array([candle[5] for candle in ohlcv])
            }
        except Exception as e:
            error_msg = str(e)
            if "Invalid symbol status" in error_msg or "symbol not found" in error_msg.lower():
                logger.warning(f"‚ö†Ô∏è Symbol {symbol} kh√¥ng kh·∫£ d·ª•ng cho {timeframe}: {error_msg}")
                return None
            elif attempt < RETRY_ATTEMPTS - 1:
                logger.warning(f"‚ö†Ô∏è L·ªói khi l·∫•y d·ªØ li·ªáu OHLCV cho {symbol} ({timeframe}, l·∫ßn {attempt + 1}/{RETRY_ATTEMPTS}): {error_msg}")
                time.sleep(1)
            else:
                logger.error(f"‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu OHLCV cho {symbol} ({timeframe}): {error_msg}")
    return None

def calculate_fibonacci_levels(highs, lows):
    """T√≠nh c√°c m·ª©c Fibonacci Retracement"""
    max_price = max(highs[-50:])
    min_price = min(lows[-50:])
    diff = max_price - min_price
    levels = {
        '23.6%': max_price - 0.236 * diff,
        '38.2%': max_price - 0.382 * diff,
        '50%': max_price - 0.5 * diff,
        '61.8%': max_price - 0.618 * diff
    }
    return levels

def find_support_resistance(highs, lows, current_price):
    """T√¨m m·ª©c h·ªó tr·ª£/kh√°ng c·ª± g·∫ßn nh·∫•t"""
    fib_levels = calculate_fibonacci_levels(highs, lows)
    support = min([price for price in fib_levels.values() if price < current_price], default=min(lows[-20:]))
    resistance = max([price for price in fib_levels.values() if price > current_price], default=max(highs[-20:]))
    return support, resistance

def calculate_pivot_points(highs, lows, closes):
    """T√≠nh c√°c m·ª©c Pivot Points (Classic)"""
    high = highs[-1]
    low = lows[-1]
    close = closes[-1]
    pivot = (high + low + close) / 3
    r1 = (2 * pivot) - low
    s1 = (2 * pivot) - high
    r2 = pivot + (high - low)
    s2 = pivot - (high - low)
    r3 = high + 2 * (pivot - low)
    s3 = low - 2 * (high - pivot)
    return {'pivot': pivot, 'r1': r1, 's1': s1, 'r2': r2, 's2': s2, 'r3': r3, 's3': s3}

def calculate_volume_profile(highs, lows, volumes, bins=10):
    """T√≠nh Volume Profile ƒë∆°n gi·∫£n (ph√¢n b·ªë kh·ªëi l∆∞·ª£ng theo m·ª©c gi√°)"""
    price_range = max(highs[-50:]) - min(lows[-50:])
    bin_size = price_range / bins
    volume_bins = [0] * bins
    for i in range(len(highs[-50:])):
        price = (highs[-50:][i] + lows[-50:][i]) / 2
        bin_index = min(int((price - min(lows[-50:])) / bin_size), bins - 1)
        volume_bins[bin_index] += volumes[-50:][i]
    max_volume_price = min(lows[-50:]) + volume_bins.index(max(volume_bins)) * bin_size
    return max_volume_price

def calculate_vwap(highs, lows, closes, volumes):
    """T√≠nh VWAP (Volume Weighted Average Price)"""
    typical_prices = (highs[-20:] + lows[-20:] + closes[-20:]) / 3
    vwap = np.sum(typical_prices * volumes[-20:]) / np.sum(volumes[-20:])
    return vwap

def detect_price_patterns(highs, lows, closes):
    """Ph√°t hi·ªán c√°c m√¥ h√¨nh gi√°"""
    pattern = 'None'
    
    # ƒê·ªânh ƒë·∫ßu vai (Head and Shoulders)
    if len(highs) >= 7:
        left_shoulder = highs[-5] > highs[-6] and highs[-5] > highs[-4]
        head = highs[-3] > highs[-5] and highs[-3] > highs[-1]
        right_shoulder = highs[-1] > highs[-2] and highs[-1] < highs[-3]
        if left_shoulder and head and right_shoulder:
            pattern = 'Head and Shoulders'
    
    # ƒê·ªânh ƒë√¥i (Double Top)
    elif len(highs) >= 5:
        if abs(highs[-3] - highs[-1]) / highs[-3] < 0.01 and highs[-3] > highs[-2] and highs[-1] > highs[-2]:
            pattern = 'Double Top'
    
    # C·ªù (Flag)
    elif len(highs) >= 10:
        uptrend = all(closes[i] > closes[i-1] for i in range(-10, -5))
        consolidation = max(highs[-5:]) - min(lows[-5:]) < 0.02 * closes[-1]
        if uptrend and consolidation:
            pattern = 'Flag'
    
    return pattern

def interpret_candlestick_patterns(patterns, current_price, ema50):
    """Ph√¢n t√≠ch √Ω nghƒ©a c·ªßa c√°c m√¥ h√¨nh n·∫øn v√† ƒë∆∞a ra k·∫øt lu·∫≠n c·ª• th·ªÉ"""
    bullish_patterns = ['Hammer', 'Bullish Engulfing', 'Morning Star', 'Three White Soldiers']
    bearish_patterns = ['Shooting Star', 'Bearish Engulfing', 'Evening Star', 'Three Black Crows']
    neutral_patterns = ['Doji', 'Spinning Top']
    
    bullish_count = sum(1 for p in patterns if p in bullish_patterns)
    bearish_count = sum(1 for p in patterns if p in bearish_patterns)
    neutral_count = sum(1 for p in patterns if p in neutral_patterns)
    
    # Ph√¢n t√≠ch chi ti·∫øt t·ª´ng m√¥ h√¨nh
    analysis = []
    
    for pattern in patterns:
        if pattern == 'Doji':
            if current_price > ema50:
                analysis.append("Doji ·ªü v√πng kh√°ng c·ª± ‚Üí C·∫£nh b√°o ƒë·∫£o chi·ªÅu gi·∫£m")
            else:
                analysis.append("Doji ·ªü v√πng h·ªó tr·ª£ ‚Üí C·∫£nh b√°o ƒë·∫£o chi·ªÅu tƒÉng")
        elif pattern == 'Hammer':
            analysis.append("Hammer ‚Üí T√≠n hi·ªáu ƒë·∫£o chi·ªÅu tƒÉng m·∫°nh")
        elif pattern == 'Shooting Star':
            analysis.append("Shooting Star ‚Üí T√≠n hi·ªáu ƒë·∫£o chi·ªÅu gi·∫£m m·∫°nh")
        elif pattern == 'Bullish Engulfing':
            analysis.append("Bullish Engulfing ‚Üí T√≠n hi·ªáu tƒÉng m·∫°nh, ƒë·∫£o chi·ªÅu t·ª´ gi·∫£m")
        elif pattern == 'Bearish Engulfing':
            analysis.append("Bearish Engulfing ‚Üí T√≠n hi·ªáu gi·∫£m m·∫°nh, ƒë·∫£o chi·ªÅu t·ª´ tƒÉng")
        elif pattern == 'Morning Star':
            analysis.append("Morning Star ‚Üí T√≠n hi·ªáu ƒë·∫£o chi·ªÅu tƒÉng r·∫•t m·∫°nh")
        elif pattern == 'Evening Star':
            analysis.append("Evening Star ‚Üí T√≠n hi·ªáu ƒë·∫£o chi·ªÅu gi·∫£m r·∫•t m·∫°nh")
        elif pattern == 'Three White Soldiers':
            analysis.append("Three White Soldiers ‚Üí Xu h∆∞·ªõng tƒÉng m·∫°nh ti·∫øp di·ªÖn")
        elif pattern == 'Three Black Crows':
            analysis.append("Three Black Crows ‚Üí Xu h∆∞·ªõng gi·∫£m m·∫°nh ti·∫øp di·ªÖn")
        elif pattern == 'Spinning Top':
            analysis.append("Spinning Top ‚Üí L∆∞·ª°ng l·ª±, c·∫ßn x√°c nh·∫≠n th√™m")
    
    # K·∫øt lu·∫≠n t·ªïng th·ªÉ
    if bullish_count > bearish_count and bullish_count > 0:
        conclusion = f"üü¢ T√çN HI·ªÜU TƒÇNG: {bullish_count} m√¥ h√¨nh bullish vs {bearish_count} bearish"
    elif bearish_count > bullish_count and bearish_count > 0:
        conclusion = f"üî¥ T√çN HI·ªÜU GI·∫¢M: {bearish_count} m√¥ h√¨nh bearish vs {bullish_count} bullish"
    elif neutral_count > 0 and bullish_count == 0 and bearish_count == 0:
        conclusion = f"üü° L∆Ø·ª†NG L·ª∞: {neutral_count} m√¥ h√¨nh trung t√≠nh"
    else:
        conclusion = "‚ö™ KH√îNG C√ì M√î H√åNH N·∫æN R√ï R√ÄNG"
    
    return {
        'patterns': patterns,
        'analysis': analysis,
        'conclusion': conclusion,
        'bullish_count': bullish_count,
        'bearish_count': bearish_count,
        'neutral_count': neutral_count
    }

def detect_candlestick_patterns(opens, highs, lows, closes):
    """Ph√°t hi·ªán c√°c m√¥ h√¨nh n·∫øn Nh·∫≠t"""
    patterns = []
    
    # N·∫øn ƒë∆°n
    body_size = abs(opens[-1] - closes[-1])
    candle_range = highs[-1] - lows[-1]
    if candle_range > 0:
        # Doji
        if body_size / candle_range < 0.1:
            patterns.append('Doji')
        # Hammer
        if (closes[-1] > opens[-1] and 
            (highs[-1] - closes[-1]) / candle_range < 0.2 and 
            (opens[-1] - lows[-1]) / candle_range > 0.6):
            patterns.append('Hammer')
        # Shooting Star
        if (closes[-1] < opens[-1] and 
            (highs[-1] - opens[-1]) / candle_range > 0.6 and 
            (closes[-1] - lows[-1]) / candle_range < 0.2):
            patterns.append('Shooting Star')
        # Spinning Top
        if body_size / candle_range < 0.3 and (highs[-1] - closes[-1]) / candle_range > 0.3 and (opens[-1] - lows[-1]) / candle_range > 0.3:
            patterns.append('Spinning Top')

    # N·∫øn ƒë√¥i
    if len(opens) >= 2:
        # Bullish Engulfing
        if (closes[-2] < opens[-2] and closes[-1] > opens[-1] and 
            closes[-1] > opens[-2] and opens[-1] < closes[-2]):
            patterns.append('Bullish Engulfing')
        # Bearish Engulfing
        if (closes[-2] > opens[-2] and closes[-1] < opens[-1] and 
            closes[-1] < opens[-2] and opens[-1] > closes[-2]):
            patterns.append('Bearish Engulfing')

    # N·∫øn ba
    if len(opens) >= 3:
        # Morning Star
        if (closes[-3] < opens[-3] and 
            abs(closes[-2] - opens[-2]) / (highs[-2] - lows[-2]) < 0.3 and 
            closes[-1] > opens[-1] and closes[-1] > (highs[-3] + lows[-3]) / 2):
            patterns.append('Morning Star')
        # Evening Star
        if (closes[-3] > opens[-3] and 
            abs(closes[-2] - opens[-2]) / (highs[-2] - lows[-2]) < 0.3 and 
            closes[-1] < opens[-1] and closes[-1] < (highs[-3] + lows[-3]) / 2):
            patterns.append('Evening Star')
        # Three White Soldiers
        if (all(closes[i] > opens[i] and closes[i] > closes[i-1] for i in [-3, -2, -1]) and
            all((highs[i] - closes[i]) / (highs[i] - lows[i]) < 0.2 for i in [-3, -2, -1])):
            patterns.append('Three White Soldiers')
        # Three Black Crows
        if (all(closes[i] < opens[i] and closes[i] < closes[i-1] for i in [-3, -2, -1]) and
            all((closes[i] - lows[i]) / (highs[i] - lows[i]) < 0.2 for i in [-3, -2, -1])):
            patterns.append('Three Black Crows')

    return patterns

def detect_elliott_wave(highs, lows, closes):
    """Ph√°t hi·ªán m√¥ h√¨nh Elliott Wave ƒë∆°n gi·∫£n"""
    wave_pattern = 'None'
    
    if len(closes) >= 10:
        # T√¨m 5 s√≥ng tƒÉng (Wave 1-5)
        waves = []
        current_wave = 0
        wave_start = 0
        
        for i in range(1, len(closes)):
            if closes[i] > closes[i-1]:  # S√≥ng tƒÉng
                if current_wave == 0 or current_wave % 2 == 0:  # B·∫Øt ƒë·∫ßu s√≥ng m·ªõi
                    current_wave += 1
                    wave_start = i-1
            elif closes[i] < closes[i-1]:  # S√≥ng gi·∫£m
                if current_wave % 2 == 1:  # K·∫øt th√∫c s√≥ng tƒÉng
                    waves.append((wave_start, i-1, 'up'))
                    current_wave += 1
                    wave_start = i-1
        
        # Ki·ªÉm tra m√¥ h√¨nh 5 s√≥ng
        if len(waves) >= 5:
            # Ki·ªÉm tra quy t·∫Øc c∆° b·∫£n c·ªßa Elliott Wave
            wave1_length = waves[0][1] - waves[0][0]
            wave3_length = waves[2][1] - waves[2][0]
            wave5_length = waves[4][1] - waves[4][0]
            
            # Wave 3 th∆∞·ªùng l√† s√≥ng d√†i nh·∫•t
            if wave3_length > wave1_length and wave3_length > wave5_length:
                wave_pattern = 'Elliott Wave 5 (Bullish)'
            else:
                wave_pattern = 'Elliott Wave 5 (Weak)'
    
    return wave_pattern

def analyze_timeframe(data, timeframe, current_price, symbol=None):
    """Ph√¢n t√≠ch k·ªπ thu·∫≠t tr√™n m·ªôt khung th·ªùi gian v·ªõi c√°c ch·ªâ b√°o v√† m√¥ h√¨nh"""
    close = data['close']
    high = data['high']
    low = data['low']
    volume = data['volume']
    open = data['open']

    # Ch·ªâ b√°o ƒë·ªông l∆∞·ª£ng - Gi·∫£m period ƒë·ªÉ gi·∫£m lag
    rsi = talib.RSI(close, timeperiod=7)  # T·ª´ 14 -> 7
    stoch_k, stoch_d = talib.STOCH(high, low, close, fastk_period=7, slowk_period=3, slowd_period=3)  # T·ª´ 14 -> 7
    macd, signal, _ = talib.MACD(close, fastperiod=6, slowperiod=13, signalperiod=4)  # T·ª´ 12,26,9 -> 6,13,4
    cci = talib.CCI(high, low, close, timeperiod=7)  # T·ª´ 14 -> 7
    roc = talib.ROC(close, timeperiod=6)  # T·ª´ 12 -> 6

    # Ch·ªâ b√°o xu h∆∞·ªõng - Gi·∫£m period ƒë·ªÉ ph·∫£n ·ª©ng nhanh h∆°n
    sma20 = talib.SMA(close, timeperiod=20)  # Th√™m SMA20
    sma50 = talib.SMA(close, timeperiod=50)
    ema20 = talib.EMA(close, timeperiod=20)  # Th√™m EMA20
    ema50 = talib.EMA(close, timeperiod=50)
    wma20 = talib.WMA(close, timeperiod=20)  # Th√™m WMA20
    wma50 = talib.WMA(close, timeperiod=50)
    ema100 = talib.EMA(close, timeperiod=100)  # T·ª´ 200 -> 100
    adx = talib.ADX(high, low, close, timeperiod=7)  # T·ª´ 14 -> 7
    sar = talib.SAR(high, low, acceleration=0.02, maximum=0.2)
    upper, middle, lower = talib.BBANDS(close, timeperiod=10, nbdevup=2, nbdevdn=2)  # T·ª´ 20 -> 10

    def calculate_ichimoku(high, low, close):
        tenkan = (talib.MAX(high, timeperiod=5) + talib.MIN(low, timeperiod=5)) / 2  # T·ª´ 9 -> 5
        kijun = (talib.MAX(high, timeperiod=13) + talib.MIN(low, timeperiod=13)) / 2  # T·ª´ 26 -> 13
        senkou_a = (tenkan + kijun) / 2
        senkou_b = (talib.MAX(high, timeperiod=26) + talib.MIN(low, timeperiod=26)) / 2  # T·ª´ 52 -> 26
        chikou = close
        return tenkan, kijun, senkou_a, senkou_b, chikou

    tenkan, kijun, senkou_a, senkou_b, chikou = calculate_ichimoku(high, low, close)

    # Ch·ªâ b√°o kh·ªëi l∆∞·ª£ng - Gi·∫£m period ƒë·ªÉ ph·∫£n ·ª©ng nhanh h∆°n
    obv = talib.OBV(close, volume)
    mfi = talib.MFI(high, low, close, volume, timeperiod=7)  # T·ª´ 14 -> 7
    volume_profile = calculate_volume_profile(high, low, volume)
    vwap = calculate_vwap(high, low, close, volume)

    # Ch·ªâ b√°o h·ªón h·ª£p - Gi·∫£m period ƒë·ªÉ ph·∫£n ·ª©ng nhanh h∆°n
    atr = talib.ATR(high, low, close, timeperiod=7)  # T·ª´ 14 -> 7
    pivot_points = calculate_pivot_points(high, low, close)
    support, resistance = find_support_resistance(high, low, current_price)

    # M√¥ h√¨nh gi√°
    price_pattern = detect_price_patterns(high, low, close)

    # M√¥ h√¨nh n·∫øn Nh·∫≠t
    candlestick_patterns = detect_candlestick_patterns(open, high, low, close)
    
    # M√¥ h√¨nh Elliott Wave
    elliott_wave = detect_elliott_wave(high, low, close)
    
    # Smart Money Concepts (SMC)
    order_blocks = detect_order_blocks(high, low, close, volume)
    fvgs = detect_fair_value_gaps(high, low, close)
    liquidity_zones = detect_liquidity_zones(high, low, close, volume)
    mitigation_zones = detect_mitigation_zones(high, low, close)
    
    # Price Action Patterns
    price_action_patterns = detect_price_action_patterns(high, low, close, volume)
    
    # Ph√¢n t√≠ch SMC v√† Price Action
    smc_signals = analyze_smc_signals(current_price, order_blocks, fvgs, liquidity_zones, mitigation_zones)
    pa_signals = analyze_price_action_signals(current_price, price_action_patterns, high, low, close)
    
    # Ph√¢n t√≠ch chi ti·∫øt m√¥ h√¨nh n·∫øn
    candlestick_analysis = interpret_candlestick_patterns(candlestick_patterns, current_price, ema50[-1])
    
    # T√≠nh to√°n ƒëi·ªÉm entry h·ª£p l√Ω
    entry_points = calculate_entry_points(current_price, high, low, close, rsi, upper, lower, ema50, pivot_points, support, resistance)

    candlestick_signal = 'Hold'
    if candlestick_analysis['bullish_count'] > candlestick_analysis['bearish_count']:
        candlestick_signal = 'Long'
    elif candlestick_analysis['bearish_count'] > candlestick_analysis['bullish_count']:
        candlestick_signal = 'Short'
    elif candlestick_analysis['neutral_count'] > 0:
        # N·∫øu ch·ªâ c√≥ m√¥ h√¨nh trung t√≠nh, ph√¢n t√≠ch chi ti·∫øt h∆°n
        for pattern in candlestick_patterns:
            if pattern in ['Doji', 'Spinning Top']:
                # Doji v√† Spinning Top c·∫ßn xem x√©t v·ªã tr√≠
                if current_price > ema50[-1]:
                    candlestick_signal = 'Short'  # ·ªû v√πng kh√°ng c·ª±
                else:
                    candlestick_signal = 'Long'   # ·ªû v√πng h·ªó tr·ª£
                break

    # T√≠n hi·ªáu t·ª´ c√°c ch·ªâ b√°o - T·ªëi ∆∞u ƒë·ªÉ gi·∫£m lag v√† tƒÉng ƒë·ªô nh·∫°y
    rsi_signal = 'Hold'
    if rsi[-1] < 25:  # T·ª´ 20 -> 25 (nh·∫°y h∆°n)
        rsi_signal = 'Long'
    elif rsi[-1] > 75:  # T·ª´ 80 -> 75 (nh·∫°y h∆°n)
        rsi_signal = 'Short'

    stoch_signal = 'Hold'
    if stoch_k[-1] < 20 and stoch_k[-1] > stoch_d[-1]:  # T·ª´ 15 -> 20
        stoch_signal = 'Long'
    elif stoch_k[-1] > 80 and stoch_k[-1] < stoch_d[-1]:  # T·ª´ 85 -> 80
        stoch_signal = 'Short'

    macd_signal = 'Hold'
    if macd[-2] < signal[-2] and macd[-1] > signal[-1] and abs(macd[-1] - signal[-1]) > abs(macd[-2] - signal[-2]):
        macd_signal = 'Long'
    elif macd[-2] > signal[-2] and macd[-1] < signal[-1] and abs(macd[-1] - signal[-1]) > abs(macd[-2] - signal[-2]):
        macd_signal = 'Short'

    cci_signal = 'Hold'
    if cci[-1] < -100:  # T·ª´ -150 -> -100 (nh·∫°y h∆°n)
        cci_signal = 'Long'
    elif cci[-1] > 100:  # T·ª´ 150 -> 100 (nh·∫°y h∆°n)
        cci_signal = 'Short'

    roc_signal = 'Hold'
    if roc[-1] > 3:  # T·ª´ 5 -> 3 (nh·∫°y h∆°n)
        roc_signal = 'Long'
    elif roc[-1] < -3:  # T·ª´ -5 -> -3 (nh·∫°y h∆°n)
        roc_signal = 'Short'

    # T√≠n hi·ªáu MA - S·ª≠ d·ª•ng MA ng·∫Øn h·∫°n ƒë·ªÉ gi·∫£m lag
    ma_signal = 'Hold'
    ma_distance = abs(sma20[-1] - ema100[-1]) / ema100[-1]
    if sma20[-1] > ema100[-1] and ema20[-1] > ema100[-1] and wma20[-1] > ema100[-1] and ma_distance > 0.01:
        ma_signal = 'Long'  # S·ª≠ d·ª•ng MA20 thay v√¨ MA50
    elif sma20[-1] < ema100[-1] and ema20[-1] < ema100[-1] and wma20[-1] < ema100[-1] and ma_distance > 0.01:
        ma_signal = 'Short'  # S·ª≠ d·ª•ng MA20 thay v√¨ MA50

    adx_signal = 'Hold'
    if adx[-1] > 25:  # T·ª´ 35 -> 25 (nh·∫°y h∆°n)
        if close[-1] > ema20[-1]:  # S·ª≠ d·ª•ng EMA20 thay v√¨ EMA50
            adx_signal = 'Long'
        elif close[-1] < ema20[-1]:
            adx_signal = 'Short'

    # Th√™m c√°c ch·ªâ b√°o leading (d·∫´n ƒë·∫ßu) ƒë·ªÉ gi·∫£m lag
    # 1. Williams %R - Ch·ªâ b√°o momentum leading
    williams_r = talib.WILLR(high, low, close, timeperiod=7)
    williams_signal = 'Hold'
    if williams_r[-1] < -80:
        williams_signal = 'Long'
    elif williams_r[-1] > -20:
        williams_signal = 'Short'

    # 2. Ultimate Oscillator - Ch·ªâ b√°o momentum leading
    ult_osc = talib.ULTOSC(high, low, close, timeperiod1=7, timeperiod2=14, timeperiod3=28)
    ult_osc_signal = 'Hold'
    if ult_osc[-1] < 30:
        ult_osc_signal = 'Long'
    elif ult_osc[-1] > 70:
        ult_osc_signal = 'Short'

    # 3. Commodity Channel Index ng·∫Øn h·∫°n
    cci_short = talib.CCI(high, low, close, timeperiod=5)
    cci_short_signal = 'Hold'
    if cci_short[-1] < -100:
        cci_short_signal = 'Long'
    elif cci_short[-1] > 100:
        cci_short_signal = 'Short'

    # 4. Momentum ng·∫Øn h·∫°n
    momentum = talib.MOM(close, timeperiod=5)
    momentum_signal = 'Hold'
    if momentum[-1] > 0:
        momentum_signal = 'Long'
    elif momentum[-1] < 0:
        momentum_signal = 'Short'

    # 5. Ch·ªâ b√°o ƒë·∫∑c bi·ªát cho h√†ng h√≥a (v√†ng v√† d·∫ßu)
    commodity_signals = {}
    if symbol in ['XAU/USD', 'WTI/USD']:
        # Aroon Indicator - t·ªët cho h√†ng h√≥a
        aroon_up, aroon_down = talib.AROON(high, low, timeperiod=14)
        aroon_signal = 'Hold'
        if aroon_up[-1] > 70 and aroon_down[-1] < 30:
            aroon_signal = 'Long'
        elif aroon_down[-1] > 70 and aroon_up[-1] < 30:
            aroon_signal = 'Short'
        commodity_signals['aroon_signal'] = aroon_signal
        
        # Commodity Selection Index (CSI) - ch·ªâ b√°o ƒë·∫∑c bi·ªát cho h√†ng h√≥a
        # CSI = (ADX * ATR * 100) / (EMA * 100)
        adx_value = adx[-1] if not np.isnan(adx[-1]) else 25
        atr_value = atr[-1] if not np.isnan(atr[-1]) else np.mean(atr[-10:])
        ema_value = ema50[-1] if not np.isnan(ema50[-1]) else current_price
        
        if ema_value > 0:
            csi = (adx_value * atr_value * 100) / (ema_value * 100)
            csi_signal = 'Hold'
            if csi > 1000:  # CSI cao = xu h∆∞·ªõng m·∫°nh
                if close[-1] > ema50[-1]:
                    csi_signal = 'Long'
                else:
                    csi_signal = 'Short'
            commodity_signals['csi_signal'] = csi_signal
        else:
            commodity_signals['csi_signal'] = 'Hold'
        
        # Seasonal Analysis cho h√†ng h√≥a
        current_month = datetime.now().month
        seasonal_signal = 'Hold'
        
        if symbol == 'XAU/USD':  # V√†ng
            # V√†ng th∆∞·ªùng tƒÉng v√†o th√°ng 1, 8, 9, 12
            bullish_months = [1, 8, 9, 12]
            bearish_months = [3, 4, 6, 7]
            if current_month in bullish_months:
                seasonal_signal = 'Long'
            elif current_month in bearish_months:
                seasonal_signal = 'Short'
        elif symbol == 'WTI/USD':  # D·∫ßu
            # D·∫ßu th∆∞·ªùng tƒÉng v√†o m√πa h√® (6-8) v√† m√πa ƒë√¥ng (12-2)
            bullish_months = [1, 2, 6, 7, 8, 12]
            bearish_months = [3, 4, 5, 9, 10, 11]
            if current_month in bullish_months:
                seasonal_signal = 'Long'
            elif current_month in bearish_months:
                seasonal_signal = 'Short'
        
        commodity_signals['seasonal_signal'] = seasonal_signal

    sar_signal = 'Hold'
    sar_distance = abs(current_price - sar[-1]) / current_price
    if current_price > sar[-1] and sar_distance > 0.01:  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch
        sar_signal = 'Long'
    elif current_price < sar[-1] and sar_distance > 0.01:  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch
        sar_signal = 'Short'

    ichimoku_signal = 'Hold'
    try:
        if (len(senkou_a) > 0 and len(senkou_b) > 0 and len(tenkan) > 0 and len(kijun) > 0 and
            len(close) > 26):
            tenkan_kijun_distance = abs(tenkan[-1] - kijun[-1]) / kijun[-1]
            if (current_price > max(senkou_a[-1], senkou_b[-1]) and 
                tenkan[-1] > kijun[-1] and 
                close[-1] > close[-27] and tenkan_kijun_distance > 0.005):
                ichimoku_signal = 'Long'  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch Tenkan-Kijun
            elif (current_price < min(senkou_a[-1], senkou_b[-1]) and 
                  tenkan[-1] < kijun[-1] and 
                  close[-1] < close[-27] and tenkan_kijun_distance > 0.005):
                ichimoku_signal = 'Short'  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch Tenkan-Kijun
    except (IndexError, ValueError):
        ichimoku_signal = 'Hold'

    bb_signal = 'Hold'
    bb_width = (upper[-1] - lower[-1]) / middle[-1]
    if current_price <= lower[-1] * 0.995:  # Th√™m ƒëi·ªÅu ki·ªán breakout m·∫°nh h∆°n
        bb_signal = 'Long'
    elif current_price >= upper[-1] * 1.005:  # Th√™m ƒëi·ªÅu ki·ªán breakout m·∫°nh h∆°n
        bb_signal = 'Short'

    obv_signal = 'Hold'
    obv_slope = obv[-1] - obv[-10]
    obv_change = obv_slope / obv[-10] if obv[-10] != 0 else 0
    if obv_change > 0.05 and close[-1] > ema50[-1]:  # Th√™m ƒëi·ªÅu ki·ªán thay ƒë·ªïi OBV
        obv_signal = 'Long'
    elif obv_change < -0.05 and close[-1] < ema50[-1]:  # Th√™m ƒëi·ªÅu ki·ªán thay ƒë·ªïi OBV
        obv_signal = 'Short'

    mfi_signal = 'Hold'
    if mfi[-1] < 15:  # T·ª´ 20 -> 15
        mfi_signal = 'Long'
    elif mfi[-1] > 85:  # T·ª´ 80 -> 85
        mfi_signal = 'Short'

    volume_profile_signal = 'Hold'
    volume_distance = abs(current_price - volume_profile) / volume_profile
    if current_price > volume_profile and volume_distance > 0.02:  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch
        volume_profile_signal = 'Long'
    elif current_price < volume_profile and volume_distance > 0.02:  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch
        volume_profile_signal = 'Short'

    vwap_signal = 'Hold'
    vwap_distance = abs(current_price - vwap) / vwap
    if current_price > vwap and vwap_distance > 0.02:  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch
        vwap_signal = 'Long'
    elif current_price < vwap and vwap_distance > 0.02:  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch
        vwap_signal = 'Short'

    atr_signal = 'Hold'
    atr_avg = np.mean(atr[-10:])
    if atr[-1] > atr_avg * 1.5:  # T·ª´ 1.2 -> 1.5 (bi·∫øn ƒë·ªông m·∫°nh h∆°n)
        if close[-1] > ema50[-1]:
            atr_signal = 'Long'
        elif close[-1] < ema50[-1]:
            atr_signal = 'Short'

    pivot_signal = 'Hold'
    pivot_distance = min(abs(current_price - pivot_points['s1']), abs(current_price - pivot_points['r1'])) / current_price
    if current_price < pivot_points['s1'] and pivot_distance > 0.01:  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch
        pivot_signal = 'Long'
    elif current_price > pivot_points['r1'] and pivot_distance > 0.01:  # Th√™m ƒëi·ªÅu ki·ªán kho·∫£ng c√°ch
        pivot_signal = 'Short'

    wyckoff_signal = 'Hold'
    bb_width = (upper[-1] - lower[-1]) / middle[-1]
    if bb_width < 0.08 and current_price <= support * 1.01 and obv_change > 0.05:  # T·ª´ 0.1 -> 0.08, th√™m ƒëi·ªÅu ki·ªán OBV
        wyckoff_signal = 'Long'
    elif bb_width < 0.08 and current_price >= resistance * 0.99 and obv_change < -0.05:  # T·ª´ 0.1 -> 0.08, th√™m ƒëi·ªÅu ki·ªán OBV
        wyckoff_signal = 'Short'

    price_pattern_signal = 'Hold'
    if price_pattern in ['Head and Shoulders', 'Double Top']:
        price_pattern_signal = 'Short'
    elif price_pattern == 'Flag' and close[-1] > ema50[-1]:
        price_pattern_signal = 'Long'

    candlestick_signal = 'Hold'
    if any(p in ['Hammer', 'Bullish Engulfing', 'Morning Star', 'Three White Soldiers'] for p in candlestick_patterns):
        candlestick_signal = 'Long'
    elif any(p in ['Shooting Star', 'Bearish Engulfing', 'Evening Star', 'Three Black Crows'] for p in candlestick_patterns):
        candlestick_signal = 'Short'

    elliott_wave_signal = 'Hold'
    if 'Bullish' in elliott_wave:
        elliott_wave_signal = 'Long'
    elif 'Bearish' in elliott_wave:
        elliott_wave_signal = 'Short'

    signals = [
        rsi_signal, stoch_signal, macd_signal, cci_signal, roc_signal,
        ma_signal, adx_signal, sar_signal, ichimoku_signal, bb_signal,
        obv_signal, mfi_signal, volume_profile_signal, vwap_signal,
        atr_signal, pivot_signal, wyckoff_signal,
        price_pattern_signal, candlestick_signal, elliott_wave_signal,
        smc_signals['order_block_signal'], smc_signals['fvg_signal'], 
        smc_signals['liquidity_signal'], smc_signals['mitigation_signal'],
        pa_signals['pattern_signal'], pa_signals['momentum_signal'],
        # Th√™m c√°c ch·ªâ b√°o leading m·ªõi
        williams_signal, ult_osc_signal, cci_short_signal, momentum_signal
    ]
    
    # Th√™m c√°c ch·ªâ b√°o ƒë·∫∑c bi·ªát cho h√†ng h√≥a
    if symbol in ['XAU/USD', 'WTI/USD']:
        signals.extend([
            commodity_signals.get('aroon_signal', 'Hold'),
            commodity_signals.get('csi_signal', 'Hold'),
            commodity_signals.get('seasonal_signal', 'Hold')
        ])
    
    # TƒÉng tr·ªçng s·ªë cho c√°c t√≠n hi·ªáu c·ª±c m·∫°nh
    extra_signals = []
    
    # 1. RSI c·ª±c m·∫°nh (qu√° mua/qu√° b√°n) - Nh·∫°y h∆°n
    if rsi[-1] < 20:  # T·ª´ 15 -> 20 (RSI c·ª±c th·∫•p)
        extra_signals.extend(['Long', 'Long', 'Long'])  # Th√™m 3 l·∫ßn
    elif rsi[-1] > 80:  # T·ª´ 85 -> 80 (RSI c·ª±c cao)
        extra_signals.extend(['Short', 'Short', 'Short'])  # Th√™m 3 l·∫ßn
    
    # 2. Stochastic c·ª±c m·∫°nh - Nh·∫°y h∆°n
    if stoch_k[-1] < 10:  # T·ª´ 5 -> 10 (Stochastic c·ª±c th·∫•p)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif stoch_k[-1] > 90:  # T·ª´ 95 -> 90 (Stochastic c·ª±c cao)
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 3. CCI c·ª±c m·∫°nh - Nh·∫°y h∆°n
    if cci[-1] < -150:  # T·ª´ -250 -> -150 (CCI c·ª±c th·∫•p)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif cci[-1] > 150:  # T·ª´ 250 -> 150 (CCI c·ª±c cao)
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 4. MFI c·ª±c m·∫°nh - Nh·∫°y h∆°n
    if mfi[-1] < 10:  # T·ª´ 5 -> 10 (MFI c·ª±c th·∫•p)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif mfi[-1] > 90:  # T·ª´ 95 -> 90 (MFI c·ª±c cao)
        extra_signals.extend(['Short', 'Short', 'Short'])

    # 5. Williams %R c·ª±c m·∫°nh (ch·ªâ b√°o leading)
    if williams_r[-1] < -90:
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif williams_r[-1] > -10:
        extra_signals.extend(['Short', 'Short', 'Short'])

    # 6. Ultimate Oscillator c·ª±c m·∫°nh (ch·ªâ b√°o leading)
    if ult_osc[-1] < 20:
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif ult_osc[-1] > 80:
        extra_signals.extend(['Short', 'Short', 'Short'])

    # 7. Momentum c·ª±c m·∫°nh (ch·ªâ b√°o leading)
    if momentum[-1] > momentum[-2] * 1.5:  # Momentum tƒÉng m·∫°nh
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif momentum[-1] < momentum[-2] * 0.5:  # Momentum gi·∫£m m·∫°nh
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 5. Bollinger Bands c·ª±c m·∫°nh (breakout)
    bb_width = (upper[-1] - lower[-1]) / middle[-1]
    if current_price < lower[-1] * 0.985:  # T·ª´ 0.99 -> 0.985 (Breakout xu·ªëng d∆∞·ªõi BB m·∫°nh h∆°n)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif current_price > upper[-1] * 1.015:  # T·ª´ 1.01 -> 1.015 (Breakout l√™n tr√™n BB m·∫°nh h∆°n)
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 6. M√¥ h√¨nh n·∫øn c·ª±c m·∫°nh
    if candlestick_analysis['conclusion'].startswith('üü¢') or candlestick_analysis['conclusion'].startswith('üî¥'):
        # Th√™m candlestick_signal 3 l·∫ßn cho t√≠n hi·ªáu m·∫°nh
        extra_signals.extend([candlestick_signal, candlestick_signal, candlestick_signal])
    
    # 7. ADX c·ª±c m·∫°nh (xu h∆∞·ªõng r·∫•t m·∫°nh) - Nh·∫°y h∆°n
    if adx[-1] > 30:  # T·ª´ 50 -> 30 (Xu h∆∞·ªõng c·ª±c m·∫°nh)
        if close[-1] > ema20[-1]:  # S·ª≠ d·ª•ng EMA20 thay v√¨ EMA50
            extra_signals.extend(['Long', 'Long', 'Long'])
        elif close[-1] < ema20[-1]:
            extra_signals.extend(['Short', 'Short', 'Short'])

    # 8. Price Action c·ª±c m·∫°nh (breakout nhanh)
    if len(close) >= 3:
        price_change = (close[-1] - close[-3]) / close[-3]
        if price_change > 0.05:  # TƒÉng > 5% trong 3 n·∫øn
            extra_signals.extend(['Long', 'Long', 'Long'])
        elif price_change < -0.05:  # Gi·∫£m > 5% trong 3 n·∫øn
            extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 8. MACD crossover c·ª±c m·∫°nh
    if macd[-1] > signal[-1] * 1.2 and macd[-2] <= signal[-2]:  # T·ª´ 1.1 -> 1.2 (Bullish crossover m·∫°nh h∆°n)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif macd[-1] < signal[-1] * 0.8 and macd[-2] >= signal[-2]:  # T·ª´ 0.9 -> 0.8 (Bearish crossover m·∫°nh h∆°n)
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 9. Volume breakout c·ª±c m·∫°nh
    avg_volume = np.mean(volume[-20:])
    if volume[-1] > avg_volume * 5:  # T·ª´ 3 -> 5 (Volume tƒÉng 500%)
        if close[-1] > close[-2]:  # Gi√° tƒÉng v·ªõi volume l·ªõn
            extra_signals.extend(['Long', 'Long', 'Long'])
        elif close[-1] < close[-2]:  # Gi√° gi·∫£m v·ªõi volume l·ªõn
            extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 10. Pivot Points c·ª±c m·∫°nh
    if current_price < pivot_points['s3']:  # T·ª´ s2 -> s3 (Breakout d∆∞·ªõi S3)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif current_price > pivot_points['r3']:  # T·ª´ r2 -> r3 (Breakout tr√™n R3)
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 11. ROC c·ª±c m·∫°nh (t·ªëc ƒë·ªô thay ƒë·ªïi gi√°)
    if roc[-1] > 15:  # T·ª´ 10 -> 15 (TƒÉng > 15%)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif roc[-1] < -15:  # T·ª´ -10 -> -15 (Gi·∫£m > 15%)
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 12. MA c·ª±c m·∫°nh (kho·∫£ng c√°ch l·ªõn gi·ªØa c√°c MA)
    ma_distance = abs(sma50[-1] - ema100[-1]) / ema100[-1]
    if ma_distance > 0.08:  # T·ª´ 0.05 -> 0.08 (Kho·∫£ng c√°ch > 8%)
        if sma50[-1] > ema100[-1]:
            extra_signals.extend(['Long', 'Long', 'Long'])
        else:
            extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 13. SAR c·ª±c m·∫°nh (kho·∫£ng c√°ch l·ªõn v·ªõi gi√°)
    sar_distance = abs(current_price - sar[-1]) / current_price
    if sar_distance > 0.05:  # T·ª´ 0.03 -> 0.05 (Kho·∫£ng c√°ch > 5%)
        if current_price > sar[-1]:
            extra_signals.extend(['Long', 'Long', 'Long'])
        else:
            extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 14. OBV c·ª±c m·∫°nh (d√≤ng ti·ªÅn m·∫°nh)
    obv_change = (obv[-1] - obv[-20]) / obv[-20]
    if obv_change > 0.15:  # T·ª´ 0.1 -> 0.15 (OBV tƒÉng > 15%)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif obv_change < -0.15:  # T·ª´ -0.1 -> -0.15 (OBV gi·∫£m > 15%)
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 15. Volume Profile c·ª±c m·∫°nh (t·∫≠p trung volume cao)
    volume_concentration = max(volume[-20:]) / np.mean(volume[-20:])
    if volume_concentration > 5:  # T·ª´ 3 -> 5 (Volume t·∫≠p trung > 500%)
        if current_price > volume_profile:
            extra_signals.extend(['Long', 'Long', 'Long'])
        else:
            extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 16. VWAP c·ª±c m·∫°nh (kho·∫£ng c√°ch l·ªõn v·ªõi VWAP)
    vwap_distance = abs(current_price - vwap) / vwap
    if vwap_distance > 0.08:  # T·ª´ 0.05 -> 0.08 (Kho·∫£ng c√°ch > 8%)
        if current_price > vwap:
            extra_signals.extend(['Long', 'Long', 'Long'])
        else:
            extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 17. ATR c·ª±c m·∫°nh (bi·∫øn ƒë·ªông c·ª±c cao)
    atr_avg = np.mean(atr[-20:])
    if atr[-1] > atr_avg * 3:  # T·ª´ 2 -> 3 (ATR > 300% trung b√¨nh)
        if close[-1] > ema50[-1]:
            extra_signals.extend(['Long', 'Long', 'Long'])
        else:
            extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 18. Wyckoff c·ª±c m·∫°nh (pattern t√≠ch l≈©y/ph√¢n ph·ªëi r√µ r√†ng)
    if bb_width < 0.05 and obv_change > 0.1:  # T·ª´ 0.08 -> 0.05, t·ª´ 0.1 -> 0.1 (T√≠ch l≈©y m·∫°nh h∆°n)
        extra_signals.extend(['Long', 'Long', 'Long'])
    elif bb_width < 0.05 and obv_change < -0.1:  # T·ª´ 0.08 -> 0.05, t·ª´ -0.1 -> -0.1 (Ph√¢n ph·ªëi m·∫°nh h∆°n)
        extra_signals.extend(['Short', 'Short', 'Short'])
    
    # 19. Price Pattern c·ª±c m·∫°nh (m√¥ h√¨nh gi√° r√µ r√†ng)
    if price_pattern in ['Head and Shoulders', 'Double Top']:
        extra_signals.extend(['Short', 'Short', 'Short'])  # Th√™m 3 l·∫ßn cho m√¥ h√¨nh ƒë·∫£o chi·ªÅu m·∫°nh
    elif price_pattern == 'Flag':
        extra_signals.extend(['Long', 'Long', 'Long'])  # Th√™m 3 l·∫ßn cho m√¥ h√¨nh ti·∫øp di·ªÖn
    
    # 20. Ch·ªâ b√°o h√†ng h√≥a c·ª±c m·∫°nh (cho v√†ng v√† d·∫ßu)
    if symbol in ['XAU/USD', 'WTI/USD']:
        # Aroon c·ª±c m·∫°nh
        if commodity_signals.get('aroon_signal') == 'Long':
            extra_signals.extend(['Long', 'Long', 'Long'])
        elif commodity_signals.get('aroon_signal') == 'Short':
            extra_signals.extend(['Short', 'Short', 'Short'])
        
        # CSI c·ª±c m·∫°nh
        if commodity_signals.get('csi_signal') == 'Long':
            extra_signals.extend(['Long', 'Long', 'Long'])
        elif commodity_signals.get('csi_signal') == 'Short':
            extra_signals.extend(['Short', 'Short', 'Short'])
        
        # Seasonal c·ª±c m·∫°nh
        if commodity_signals.get('seasonal_signal') == 'Long':
            extra_signals.extend(['Long', 'Long', 'Long'])
        elif commodity_signals.get('seasonal_signal') == 'Short':
            extra_signals.extend(['Short', 'Short', 'Short'])

    # Th√™m c√°c t√≠n hi·ªáu c·ª±c m·∫°nh v√†o danh s√°ch
    signals.extend(extra_signals)
    
    long_count = signals.count('Long')
    short_count = signals.count('Short')
    total_signals = len(signals)

    signal = 'Hold'
    consensus_ratio = 0
    if long_count / total_signals >= SIGNAL_THRESHOLD:
        signal = 'Long'
        consensus_ratio = long_count / total_signals
    elif short_count / total_signals >= SIGNAL_THRESHOLD:
        signal = 'Short'
        consensus_ratio = short_count / total_signals

    return {
        'timeframe': timeframe,
        'signal': signal,
        'consensus_ratio': consensus_ratio,
        'rsi_signal': rsi_signal,
        'stoch_signal': stoch_signal,
        'macd_signal': macd_signal,
        'cci_signal': cci_signal,
        'roc_signal': roc_signal,
        'ma_signal': ma_signal,
        'adx_signal': adx_signal,
        'adx_value': adx[-1],
        'sar_signal': sar_signal,
        'ichimoku_signal': ichimoku_signal,
        'bb_signal': bb_signal,
        'obv_signal': obv_signal,
        'mfi_signal': mfi_signal,
        'volume_profile_signal': volume_profile_signal,
        'vwap_signal': vwap_signal,
        'atr_signal': atr_signal,
        'pivot_signal': pivot_signal,
        'wyckoff_signal': wyckoff_signal,
        'price_pattern_signal': price_pattern_signal,
        'candlestick_signal': candlestick_signal,
        'elliott_wave_signal': elliott_wave_signal,
        # Th√™m c√°c ch·ªâ b√°o leading m·ªõi
        'williams_signal': williams_signal,
        'ult_osc_signal': ult_osc_signal,
        'cci_short_signal': cci_short_signal,
        'momentum_signal': momentum_signal,
        'rsi_value': rsi[-1],
        'mfi_value': mfi[-1],
        'current_price': current_price,
        'price_pattern': price_pattern,
        'candlestick_patterns': candlestick_patterns,
        'candlestick_analysis': candlestick_analysis,
        'elliott_wave': elliott_wave,
        'entry_points': entry_points,
        'smc_signals': smc_signals,
        'pa_signals': pa_signals,
        'order_blocks': order_blocks,
        'fvgs': fvgs,
        'liquidity_zones': liquidity_zones,
        'mitigation_zones': mitigation_zones,
        'price_action_patterns': price_action_patterns,
        'commodity_signals': commodity_signals if symbol in ['XAU/USD', 'WTI/USD'] else {}
    }

def make_decision(analyses):
    """T·ªïng h·ª£p nh·∫≠n ƒë·ªãnh t·ª´ c√°c khung th·ªùi gian
    
    Logic:
    - SIGNAL_THRESHOLD (50%): Ng∆∞·ª°ng t·ªëi thi·ªÉu ƒë·ªÉ m·ªôt timeframe ƒë∆∞·ª£c coi l√† c√≥ t√≠n hi·ªáu h·ª£p l·ªá
    - consensus_ratio: T·ª∑ l·ªá ƒë·ªìng thu·∫≠n th·ª±c t·∫ø c·ªßa timeframe c√≥ t√≠n hi·ªáu m·∫°nh nh·∫•t
    - Ch·ªâ nh·ªØng timeframe c√≥ consensus_ratio >= SIGNAL_THRESHOLD m·ªõi ƒë∆∞·ª£c x√©t
    """
    valid_timeframes = []
    for analysis in analyses:
        if analysis['signal'] in ['Long', 'Short'] and analysis['consensus_ratio'] >= SIGNAL_THRESHOLD:
            valid_timeframes.append(analysis)
    
    if valid_timeframes:
        signals = [a['signal'] for a in valid_timeframes]
        has_long = 'Long' in signals
        has_short = 'Short' in signals
        if has_long and has_short:
            return 'Mixed', 0, valid_timeframes
        best_analysis = max(valid_timeframes, key=lambda x: x['consensus_ratio'])
        return best_analysis['signal'], best_analysis['consensus_ratio'], valid_timeframes
    return 'Hold', 0, []

def analyze_coin(symbol):
    """Ph√¢n t√≠ch xu h∆∞·ªõng ng·∫Øn h·∫°n cho m·ªôt coin, v√†ng ho·∫∑c d·∫ßu"""
    try:
        logger.info(f"üîç B·∫Øt ƒë·∫ßu ph√¢n t√≠ch {symbol}...")
        
        # X·ª≠ l√Ω ƒë·∫∑c bi·ªát cho v√†ng v√† d·∫ßu
        if symbol in ['XAU/USD', 'WTI/USD']:
            current_price = get_commodity_current_price(symbol)
            if current_price is None:
                logger.error(f"Kh√¥ng th·ªÉ l·∫•y gi√° hi·ªán t·∫°i cho {symbol}")
                return None
            logger.info(f"‚úÖ ƒê√£ l·∫•y gi√° hi·ªán t·∫°i cho {symbol}: ${current_price}")
        else:
            # X·ª≠ l√Ω b√¨nh th∆∞·ªùng cho crypto
            ticker = exchange.fetch_ticker(symbol)
            current_price = ticker['last']
            logger.info(f"‚úÖ ƒê√£ l·∫•y gi√° hi·ªán t·∫°i cho {symbol}: ${current_price}")
    except Exception as e:
        logger.error(f"L·ªói khi l·∫•y gi√° hi·ªán t·∫°i cho {symbol}: {e}")
        return None

    analyses = []
    for timeframe in TIMEFRAMES:
        logger.info(f"üìä ƒêang l·∫•y d·ªØ li·ªáu {symbol} cho timeframe {timeframe}...")
        data = fetch_ohlcv(symbol, timeframe, CANDLE_LIMIT)
        if data is None:
            logger.warning(f"‚ùå Kh√¥ng th·ªÉ l·∫•y d·ªØ li·ªáu cho {symbol} ({timeframe})")
            continue
        logger.info(f"‚úÖ ƒê√£ l·∫•y d·ªØ li·ªáu {symbol} ({timeframe}): {len(data['close'])} candles")
        
        analysis = analyze_timeframe(data, timeframe, current_price, symbol)
        
        # ƒêi·ªÅu ch·ªânh ph√¢n t√≠ch d·ª±a tr√™n ƒë·ªô ch√≠nh x√°c l·ªãch s·ª≠
        analysis = adjust_analysis_based_on_accuracy(analysis, symbol, timeframe)
        
        analyses.append(analysis)

    if not analyses:
        logger.debug(f"B·ªè qua {symbol}: kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ b·∫•t k·ª≥ timeframe n√†o")
        return None

    decision, consensus_ratio, valid_timeframes = make_decision(analyses)

    # T·∫°o k·∫øt qu·∫£ ph√¢n t√≠ch
    result = {
        'symbol': symbol,
        'decision': decision,
        'consensus_ratio': consensus_ratio,
        'valid_timeframes': valid_timeframes,
        'analyses': analyses,
        'current_price': current_price
    }

    # L∆∞u d·ª± ƒëo√°n cho c√°c timeframe c√≥ t√≠n hi·ªáu m·∫°nh
    for analysis in valid_timeframes:
        if analysis['consensus_ratio'] >= SIGNAL_THRESHOLD:
            prediction_data = {
                'trend': analysis.get('trend', 'neutral'),
                'signal': analysis.get('signal', 'Hold'),
                'confidence': analysis.get('confidence', 0),
                'entry_points': analysis.get('entry_points', {}),
                'analysis_summary': f"Timeframe: {analysis['timeframe']}, Consensus: {analysis['consensus_ratio']:.1%}",
                'technical_signals': {
                    'rsi_signal': analysis.get('rsi_signal', 'Hold'),
                    'macd_signal': analysis.get('macd_signal', 'Hold'),
                    'bb_signal': analysis.get('bb_signal', 'Hold'),
                    'stoch_signal': analysis.get('stoch_signal', 'Hold')
                },
                'commodity_signals': analysis.get('commodity_signals', {}),
                'smc_signals': analysis.get('smc_signals', {}),
                'price_action_signals': analysis.get('pa_signals', {})
            }
            
            # L∆∞u d·ª± ƒëo√°n
            prediction_id = save_prediction(symbol, analysis['timeframe'], prediction_data, current_price)
            if prediction_id:
                logger.info(f"üìù ƒê√£ l∆∞u d·ª± ƒëo√°n {prediction_id} cho {symbol} ({analysis['timeframe']})")

    return result

def send_telegram_message(message):
    """G·ª≠i tin nh·∫Øn qua Telegram Bot"""
    if TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or TELEGRAM_CHAT_ID == "YOUR_CHAT_ID_HERE":
        logger.warning("Ch∆∞a c·∫•u h√¨nh Telegram Bot Token ho·∫∑c Chat ID")
        return False
    
    try:
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            logger.info("ƒê√£ g·ª≠i b√°o c√°o qua Telegram th√†nh c√¥ng")
            return True
        else:
            logger.error(f"L·ªói khi g·ª≠i Telegram: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"L·ªói khi g·ª≠i Telegram: {e}")
        return False

def format_coin_report(result):
    """ƒê·ªãnh d·∫°ng b√°o c√°o ph√¢n t√≠ch cho m·ªôt ƒë·ªìng coin, v√†ng ho·∫∑c d·∫ßu c·ª• th·ªÉ - T·ªëi ∆∞u cho t√≠n hi·ªáu m·∫°nh"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    symbol = result['symbol']
    decision = result['decision']
    consensus_ratio = result['consensus_ratio']
    valid_timeframes = result['valid_timeframes']
    
    # X√°c ƒë·ªãnh lo·∫°i t√†i s·∫£n ƒë·ªÉ hi·ªÉn th·ªã emoji ph√π h·ª£p
    asset_type = "COIN"
    if symbol == 'XAU/USD':
        asset_type = "V√ÄNG"
    elif symbol == 'WTI/USD':
        asset_type = "D·∫¶U"
    
    report = f"ü§ñ <b>PH√ÇN T√çCH {asset_type} {symbol}</b>\n"
    report += f"‚è∞ {current_time} | üìä Ng∆∞·ª°ng t·ªëi thi·ªÉu: {SIGNAL_THRESHOLD:.1%}\n\n"
    
    if decision == 'Mixed':
        report += f"‚ö†Ô∏è <b>{symbol}: T√çN HI·ªÜU TR√ÅI CHI·ªÄU</b>\n"
        for analysis in valid_timeframes:
            report += f"  ‚Ä¢ {analysis['timeframe']}: {analysis['signal']} ({analysis['consensus_ratio']:.1%})\n"
    elif decision in ['Long', 'Short']:
        emoji = "‚úÖ" if decision == 'Long' else "üî¥"
        report += f"{emoji} <b>{symbol}: {decision}</b> (ƒê·ªìng thu·∫≠n: {consensus_ratio:.1%})\n"
        report += f"üìä Timeframes: {', '.join([a['timeframe'] for a in valid_timeframes])}\n"
        report += f"üí° T√≠n hi·ªáu t·ª´ timeframe c√≥ ƒë·ªìng thu·∫≠n cao nh·∫•t\n\n"
        
        # Hi·ªÉn th·ªã th√¥ng tin v·ªÅ c√°c timeframe ƒë∆∞·ª£c ch·ªçn
        for analysis in valid_timeframes:
            report += f"üìä <b>{analysis['timeframe']}:</b> {analysis['signal']} (ƒê·ªìng thu·∫≠n: {analysis['consensus_ratio']:.1%})\n"
        report += "\n"
        
        # Ch·ªâ hi·ªÉn th·ªã c√°c t√≠n hi·ªáu m·∫°nh v√† quan tr·ªçng nh·∫•t
        for analysis in valid_timeframes:
            timeframe = analysis['timeframe']
            strong_signals = []
            
            # RSI c·ª±c m·∫°nh (15/85)
            if analysis['rsi_value'] < 15 or analysis['rsi_value'] > 85:
                strong_signals.append(f"RSI({analysis['rsi_value']:.1f})")
            
            # M√¥ h√¨nh n·∫øn m·∫°nh
            if analysis['candlestick_analysis']['conclusion'].startswith('üü¢') or analysis['candlestick_analysis']['conclusion'].startswith('üî¥'):
                strong_signals.append("M√¥ h√¨nh n·∫øn m·∫°nh")
            
            # MACD crossover m·∫°nh
            if analysis['macd_signal'] != 'Hold':
                strong_signals.append("MACD crossover")
            
            # Bollinger Bands breakout
            if analysis['bb_signal'] != 'Hold':
                strong_signals.append("BB breakout")
            
            # M√¥ h√¨nh gi√° quan tr·ªçng
            if analysis['price_pattern'] != 'None':
                strong_signals.append(f"M√¥ h√¨nh: {analysis['price_pattern']}")
            
            # SMC signals m·∫°nh
            if 'smc_signals' in analysis:
                smc = analysis['smc_signals']
                if smc['order_block_signal'] != 'Hold':
                    strong_signals.append("Order Block")
                if smc['fvg_signal'] != 'Hold':
                    strong_signals.append("Fair Value Gap")
            
            # Price Action m·∫°nh
            if 'pa_signals' in analysis:
                pa = analysis['pa_signals']
                if pa['pattern_signal'] != 'Hold':
                    strong_signals.append("Price Action")
            
            # Ch·ªâ b√°o h√†ng h√≥a m·∫°nh (cho v√†ng v√† d·∫ßu)
            if 'commodity_signals' in analysis and analysis['commodity_signals']:
                commodity = analysis['commodity_signals']
                if commodity.get('aroon_signal') != 'Hold':
                    strong_signals.append("Aroon")
                if commodity.get('csi_signal') != 'Hold':
                    strong_signals.append("CSI")
                if commodity.get('seasonal_signal') != 'Hold':
                    strong_signals.append("Seasonal")
            
            # Hi·ªÉn th·ªã t√≠n hi·ªáu m·∫°nh (t·ªëi ƒëa 5 t√≠n hi·ªáu quan tr·ªçng nh·∫•t)
            if strong_signals:
                report += f"üìä <b>{timeframe}:</b> {', '.join(strong_signals[:5])}\n"
            
            # Ch·ªâ hi·ªÉn th·ªã entry points cho timeframe c√≥ t√≠n hi·ªáu m·∫°nh nh·∫•t
            if analysis == max(valid_timeframes, key=lambda x: x['consensus_ratio']):
                if 'entry_points' in analysis:
                    entry = analysis['entry_points']
                    report += f"üéØ <b>ENTRY ({timeframe}):</b>\n"
                    report += f"  ‚Ä¢ Entry: ${entry['aggressive']:.4f}\n"
                    report += f"  ‚Ä¢ SL: ${entry['stop_loss']:.4f}\n"
                    report += f"  ‚Ä¢ TP: ${entry['take_profit']:.4f}\n"
            
            report += "\n"
    else:
        report += f"‚è∏Ô∏è {symbol}: Kh√¥ng c√≥ t√≠n hi·ªáu m·∫°nh\n"
    
    return report

def format_analysis_report(results):
    """ƒê·ªãnh d·∫°ng b√°o c√°o ph√¢n t√≠ch cho Telegram (gi·ªØ l·∫°i cho t∆∞∆°ng th√≠ch)"""
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    
    # L·∫•y th·ªëng k√™ ƒë·ªô ch√≠nh x√°c
    accuracy_data = get_prediction_accuracy_data()
    accuracy_summary = ""
    if accuracy_data:
        overall = accuracy_data.get('overall', {})
        if overall.get('total_predictions', 0) > 0:
            accuracy_summary = f" | üìà ƒê·ªô ch√≠nh x√°c: {overall['accuracy']:.1%} ({overall['accurate_predictions']}/{overall['total_predictions']})"
    
    report = f"ü§ñ <b>B√ÅO C√ÅO PH√ÇN T√çCH XU H∆Ø·ªöNG</b>\n"
    report += f"‚è∞ Th·ªùi gian: {current_time}\n"
    report += f"üìä Ng∆∞·ª°ng t·ªëi thi·ªÉu: {SIGNAL_THRESHOLD:.1%}{accuracy_summary}\n"
    report += f"üí∞ T√†i s·∫£n: Crypto, V√†ng, D·∫ßu\n\n"
    
    if not results:
        report += "üìä Kh√¥ng c√≥ xu h∆∞·ªõng m·∫°nh n√†o ƒë∆∞·ª£c ph√°t hi·ªán."
        return report
    
    for result in results:
        symbol = result['symbol']
        decision = result['decision']
        consensus_ratio = result['consensus_ratio']
        valid_timeframes = result['valid_timeframes']
        
        if decision == 'Mixed':
            report += f"‚ö†Ô∏è <b>{symbol}: C√ì K·∫æT LU·∫¨N TR√ÅI CHI·ªÄU</b>\n"
            for analysis in valid_timeframes:
                report += f"  ‚Ä¢ {analysis['timeframe']}: {analysis['signal']} ({analysis['consensus_ratio']:.1%})\n"
        elif decision in ['Long', 'Short']:
            emoji = "‚úÖ" if decision == 'Long' else "üî¥"
            report += f"{emoji} <b>{symbol}: {decision}</b> (ƒê·ªìng thu·∫≠n: {consensus_ratio:.1%})\n"
            report += f"üìä Timeframes: {', '.join([a['timeframe'] for a in valid_timeframes])}\n"
            
            # Th√™m th√¥ng tin chi ti·∫øt cho t·ª´ng timeframe
            for analysis in valid_timeframes:
                timeframe = analysis['timeframe']
                report += f"üìä <b>Timeframe {timeframe}:</b>\n"
                report += f"üìà RSI: {analysis['rsi_signal']} ({analysis['rsi_value']:.1f}) -> {timeframe}\n"
                report += f"üìä MA: {analysis['ma_signal']} | ADX: {analysis['adx_signal']} -> {timeframe}\n"
                report += f"üéØ Ichimoku: {analysis['ichimoku_signal']} | SAR: {analysis['sar_signal']} -> {timeframe}\n"
                report += f"üìâ BB: {analysis['bb_signal']} | OBV: {analysis['obv_signal']} -> {timeframe}\n"
                report += f"üí∞ MFI: {analysis['mfi_signal']} ({analysis['mfi_value']:.1f}) -> {timeframe}\n"
                
                if analysis['price_pattern'] != 'None':
                    report += f"üìä M√¥ h√¨nh gi√°: {analysis['price_pattern']} -> {timeframe}\n"
                if analysis['candlestick_patterns']:
                    report += f"üïØÔ∏è M√¥ h√¨nh n·∫øn: {', '.join(analysis['candlestick_patterns'])} -> {timeframe}\n"
                if analysis['candlestick_analysis']['conclusion'] != "‚ö™ KH√îNG C√ì M√î H√åNH N·∫æN R√ï R√ÄNG":
                    report += f"üìä Ph√¢n t√≠ch m√¥ h√¨nh n·∫øn: {analysis['candlestick_analysis']['conclusion']} -> {timeframe}\n"
                    report += f"üìù Chi ti·∫øt: {', '.join(analysis['candlestick_analysis']['analysis'])} -> {timeframe}\n"
                
                # Th√™m th√¥ng tin chi ti·∫øt v·ªÅ c√°c pattern kh√°c
                if analysis['wyckoff_signal'] != 'Hold':
                    report += f"üìà Wyckoff: {analysis['wyckoff_signal']} -> {timeframe}\n"
                if analysis['pivot_signal'] != 'Hold':
                    report += f"üéØ Pivot: {analysis['pivot_signal']} -> {timeframe}\n"
                if analysis['elliott_wave'] != 'None':
                    report += f"üåä Elliott Wave: {analysis['elliott_wave']} ({analysis['elliott_wave_signal']}) -> {timeframe}\n"
                
                # Ch·ªâ b√°o h√†ng h√≥a (cho v√†ng v√† d·∫ßu)
                if 'commodity_signals' in analysis and analysis['commodity_signals']:
                    commodity = analysis['commodity_signals']
                    if commodity.get('aroon_signal') != 'Hold':
                        report += f"üìà Aroon: {commodity['aroon_signal']} -> {timeframe}\n"
                    if commodity.get('csi_signal') != 'Hold':
                        report += f"üìä CSI: {commodity['csi_signal']} -> {timeframe}\n"
                    if commodity.get('seasonal_signal') != 'Hold':
                        report += f"üìÖ Seasonal: {commodity['seasonal_signal']} -> {timeframe}\n"
                
                # Debug: Hi·ªÉn th·ªã t·∫•t c·∫£ c√°c t√≠n hi·ªáu ƒë·ªÉ ki·ªÉm tra
                report += f"üîç Debug - T·∫•t c·∫£ t√≠n hi·ªáu: RSI({analysis['rsi_signal']}), Stoch({analysis['stoch_signal']}), MACD({analysis['macd_signal']}), CCI({analysis['cci_signal']}), ROC({analysis['roc_signal']}), MA({analysis['ma_signal']}), ADX({analysis['adx_signal']}), SAR({analysis['sar_signal']}), Ichimoku({analysis['ichimoku_signal']}), BB({analysis['bb_signal']}), OBV({analysis['obv_signal']}), MFI({analysis['mfi_signal']}), VP({analysis['volume_profile_signal']}), VWAP({analysis['vwap_signal']}), ATR({analysis['atr_signal']}), Pivot({analysis['pivot_signal']}), Wyckoff({analysis['wyckoff_signal']}), Price({analysis['price_pattern_signal']}), Candle({analysis['candlestick_signal']}), Elliott({analysis['elliott_wave_signal']}) -> {timeframe}\n"
                
                # Th√™m th√¥ng tin ƒëi·ªÉm entry
                if 'entry_points' in analysis:
                    entry = analysis['entry_points']
                    report += f"üéØ <b>ƒêI·ªÇM ENTRY H·ª¢P L√ù ({timeframe}):</b>\n"
                    report += f"  ‚Ä¢ Entry b·∫£o th·ªß: ${entry['conservative']:.4f}\n"
                    report += f"  ‚Ä¢ Entry t√≠ch c·ª±c: ${entry['aggressive']:.4f}\n"
                    report += f"  ‚Ä¢ Stop Loss: ${entry['stop_loss']:.4f}\n"
                    report += f"  ‚Ä¢ Take Profit: ${entry['take_profit']:.4f}\n"
                    for analysis_line in entry['analysis']:
                        report += f"  {analysis_line}\n"
                
                report += "\n"  # Th√™m d√≤ng tr·ªëng gi·ªØa c√°c timeframe
        else:
            report += f"‚è∏Ô∏è {symbol}: Kh√¥ng c√≥ t√≠n hi·ªáu m·∫°nh\n"
        
        report += "\n"
    
    return report

def format_prediction_accuracy_report():
    """ƒê·ªãnh d·∫°ng b√°o c√°o th·ªëng k√™ ƒë·ªô ch√≠nh x√°c d·ª± ƒëo√°n"""
    accuracy_data = get_prediction_accuracy_data()
    if not accuracy_data:
        return "üìä Ch∆∞a c√≥ d·ªØ li·ªáu ƒë·ªô ch√≠nh x√°c d·ª± ƒëo√°n"
    
    current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
    report = f"üìà <b>B√ÅO C√ÅO ƒê·ªò CH√çNH X√ÅC D·ª∞ ƒêO√ÅN</b>\n"
    report += f"‚è∞ {current_time}\n\n"
    
    # Th·ªëng k√™ t·ªïng th·ªÉ
    overall = accuracy_data.get('overall', {})
    if overall.get('total_predictions', 0) > 0:
        report += f"üìä <b>TH·ªêNG K√ä T·ªîNG TH·ªÇ:</b>\n"
        report += f"  ‚Ä¢ T·ªïng d·ª± ƒëo√°n: {overall['total_predictions']}\n"
        report += f"  ‚Ä¢ D·ª± ƒëo√°n ch√≠nh x√°c: {overall['accurate_predictions']}\n"
        report += f"  ‚Ä¢ ƒê·ªô ch√≠nh x√°c: {overall['accuracy']:.1%}\n\n"
    
    # Th·ªëng k√™ theo symbol
    symbol_stats = accuracy_data.get('by_symbol', {})
    if symbol_stats:
        report += f"üí∞ <b>THEO T√ÄI S·∫¢N:</b>\n"
        for symbol, stats in symbol_stats.items():
            if stats['total'] > 0:
                emoji = "üü°" if symbol == 'XAU/USD' else "üü†" if symbol == 'WTI/USD' else "üü¢"
                report += f"  {emoji} {symbol}: {stats['accuracy']:.1%} ({stats['accurate']}/{stats['total']})\n"
        report += "\n"
    
    # Th·ªëng k√™ theo timeframe
    timeframe_stats = accuracy_data.get('by_timeframe', {})
    if timeframe_stats:
        report += f"‚è∞ <b>THEO TIMEFRAME:</b>\n"
        for timeframe, stats in timeframe_stats.items():
            if stats['total'] > 0:
                report += f"  üìä {timeframe}: {stats['accuracy']:.1%} ({stats['accurate']}/{stats['total']})\n"
    
    return report

def telegram_report_scheduler():
    """L·∫≠p l·ªãch g·ª≠i b√°o c√°o Telegram ƒë·ªãnh k·ª≥"""
    def send_periodic_report():
        while True:
            try:
                logger.info("üîÑ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ƒë·ªÉ g·ª≠i b√°o c√°o Telegram...")
                
                results = []
                for symbol in SYMBOLS:
                    result = analyze_coin(symbol)
                    if result:
                        results.append(result)
                
                # G·ª≠i b√°o c√°o ri√™ng cho t·ª´ng coin
                if results:
                    for result in results:
                        try:
                            coin_report = format_coin_report(result)
                            send_telegram_message(coin_report)
                            logger.info(f"üì± ƒê√£ g·ª≠i b√°o c√°o cho {result['symbol']}")
                            time.sleep(2)  # Ch·ªù 2 gi√¢y gi·ªØa c√°c tin nh·∫Øn
                        except Exception as e:
                            logger.error(f"L·ªói khi g·ª≠i b√°o c√°o cho {result['symbol']}: {e}")
                else:
                    logger.info("Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch ƒë·ªÉ g·ª≠i b√°o c√°o")
                
                logger.info(f"‚è∞ Ch·ªù {TELEGRAM_REPORT_INTERVAL} gi√¢y ƒë·ªÉ g·ª≠i b√°o c√°o ti·∫øp theo...")
                time.sleep(TELEGRAM_REPORT_INTERVAL)
                
            except Exception as e:
                logger.error(f"L·ªói trong telegram_report_scheduler: {e}")
                time.sleep(60)  # Ch·ªù 1 ph√∫t n·∫øu c√≥ l·ªói
    
    # Kh·ªüi ƒë·ªông thread g·ª≠i b√°o c√°o ƒë·ªãnh k·ª≥
    report_thread = threading.Thread(target=send_periodic_report, daemon=True)
    report_thread.start()
    logger.info(f"üì± ƒê√£ kh·ªüi ƒë·ªông Telegram Report Scheduler (g·ª≠i b√°o c√°o m·ªói {TELEGRAM_REPORT_INTERVAL//3600} gi·ªù)")

def prediction_update_scheduler():
    """L·∫≠p l·ªãch c·∫≠p nh·∫≠t k·∫øt qu·∫£ d·ª± ƒëo√°n ƒë·ªãnh k·ª≥"""
    def update_predictions_periodically():
        while True:
            try:
                logger.info("üîÑ C·∫≠p nh·∫≠t k·∫øt qu·∫£ d·ª± ƒëo√°n...")
                
                # C·∫≠p nh·∫≠t k·∫øt qu·∫£ th·ª±c t·∫ø cho c√°c d·ª± ƒëo√°n
                update_prediction_results()
                
                # D·ªçn d·∫πp c√°c d·ª± ƒëo√°n c≈©
                cleanup_old_predictions()
                
                logger.info(f"‚è∞ Ch·ªù {PREDICTION_UPDATE_INTERVAL} gi√¢y ƒë·ªÉ c·∫≠p nh·∫≠t d·ª± ƒëo√°n ti·∫øp theo...")
                time.sleep(PREDICTION_UPDATE_INTERVAL)
                
            except Exception as e:
                logger.error(f"L·ªói trong prediction_update_scheduler: {e}")
                time.sleep(300)  # Ch·ªù 5 ph√∫t n·∫øu c√≥ l·ªói
    
    # Kh·ªüi ƒë·ªông thread c·∫≠p nh·∫≠t d·ª± ƒëo√°n ƒë·ªãnh k·ª≥
    prediction_thread = threading.Thread(target=update_predictions_periodically, daemon=True)
    prediction_thread.start()
    logger.info(f"üìä ƒê√£ kh·ªüi ƒë·ªông Prediction Update Scheduler (c·∫≠p nh·∫≠t m·ªói {PREDICTION_UPDATE_INTERVAL//3600} gi·ªù)")

def calculate_entry_points(current_price, highs, lows, closes, rsi, bb_upper, bb_lower, ema50, pivot_points, support, resistance):
    """T√≠nh to√°n c√°c ƒëi·ªÉm entry h·ª£p l√Ω"""
    entry_points = {
        'immediate': current_price,
        'conservative': current_price,
        'aggressive': current_price,
        'stop_loss': current_price,
        'take_profit': current_price,
        'analysis': []
    }
    
    # 1. Ph√¢n t√≠ch xu h∆∞·ªõng hi·ªán t·∫°i
    trend = 'neutral'
    if current_price > ema50[-1]:
        trend = 'bullish'
    else:
        trend = 'bearish'
    
    # 2. T√≠nh c√°c m·ª©c entry cho Long
    if trend == 'bullish':
        # Entry b·∫£o th·ªß (Conservative) - Ch·ªù pullback v·ªÅ h·ªó tr·ª£
        conservative_entry = min(support, bb_lower[-1], pivot_points['s1'])
        entry_points['conservative'] = conservative_entry
        
        # Entry t√≠ch c·ª±c (Aggressive) - V√†o ngay khi c√≥ t√≠n hi·ªáu
        aggressive_entry = current_price * 0.995  # V√†o th·∫•p h∆°n gi√° hi·ªán t·∫°i 0.5%
        entry_points['aggressive'] = aggressive_entry
        
        # Stop Loss - D·ª±a tr√™n m·ª©c h·ªó tr·ª£ m·∫°nh (s2) ƒë·ªÉ t·∫°o R/R t·ªët h∆°n
        # S·ª≠ d·ª•ng s2 thay v√¨ s1 ƒë·ªÉ SL g·∫ßn entry h∆°n
        stop_loss = min(support * 0.998, bb_lower[-1] * 0.999, pivot_points['s2'] * 0.999)
        entry_points['stop_loss'] = stop_loss
        
        # Take Profit - T·ª∑ l·ªá v·ªõi kho·∫£ng c√°ch SL ƒë·ªÉ t·∫°o R/R √≠t nh·∫•t 1:2
        sl_distance = current_price - stop_loss
        if sl_distance > 0:
            # TP = Entry + (SL_distance * 2.5) ƒë·ªÉ c√≥ R/R √≠t nh·∫•t 1:2.5
            take_profit = current_price + (sl_distance * 2.5)
        else:
            # Fallback n·∫øu kh√¥ng t√≠nh ƒë∆∞·ª£c SL distance
            atr = np.mean([highs[i] - lows[i] for i in range(-10, 0)])
            take_profit = current_price + (atr * 1.5)
        entry_points['take_profit'] = take_profit
        
        entry_points['analysis'].append(f"üìà XU H∆Ø·ªöNG TƒÇNG - ƒêi·ªÉm entry h·ª£p l√Ω:")
        entry_points['analysis'].append(f"  ‚Ä¢ Entry b·∫£o th·ªß: ${conservative_entry:.4f} (ch·ªù pullback)")
        entry_points['analysis'].append(f"  ‚Ä¢ Entry t√≠ch c·ª±c: ${aggressive_entry:.4f} (v√†o ngay)")
        entry_points['analysis'].append(f"  ‚Ä¢ Stop Loss: ${stop_loss:.4f}")
        entry_points['analysis'].append(f"  ‚Ä¢ Take Profit: ${take_profit:.4f}")
    
    # 3. T√≠nh c√°c m·ª©c entry cho Short
    elif trend == 'bearish':
        # Entry b·∫£o th·ªß - Ch·ªù bounce v·ªÅ kh√°ng c·ª±
        conservative_entry = max(resistance, bb_upper[-1], pivot_points['r1'])
        entry_points['conservative'] = conservative_entry
        
        # Entry t√≠ch c·ª±c - V√†o ngay khi c√≥ t√≠n hi·ªáu
        aggressive_entry = current_price * 1.005  # V√†o cao h∆°n gi√° hi·ªán t·∫°i 0.5%
        entry_points['aggressive'] = aggressive_entry
        
        # Stop Loss - D·ª±a tr√™n m·ª©c kh√°ng c·ª± m·∫°nh (r2) ƒë·ªÉ t·∫°o R/R t·ªët h∆°n
        # S·ª≠ d·ª•ng r2 thay v√¨ r1 ƒë·ªÉ SL g·∫ßn entry h∆°n
        stop_loss = max(resistance * 1.002, bb_upper[-1] * 1.001, pivot_points['r2'] * 1.001)
        entry_points['stop_loss'] = stop_loss
        
        # Take Profit - T·ª∑ l·ªá v·ªõi kho·∫£ng c√°ch SL ƒë·ªÉ t·∫°o R/R √≠t nh·∫•t 1:2
        sl_distance = stop_loss - current_price
        if sl_distance > 0:
            # TP = Entry - (SL_distance * 2.5) ƒë·ªÉ c√≥ R/R √≠t nh·∫•t 1:2.5
            take_profit = current_price - (sl_distance * 2.5)
        else:
            # Fallback n·∫øu kh√¥ng t√≠nh ƒë∆∞·ª£c SL distance
            atr = np.mean([highs[i] - lows[i] for i in range(-10, 0)])
            take_profit = current_price - (atr * 1.5)
        entry_points['take_profit'] = take_profit
        
        entry_points['analysis'].append(f"üìâ XU H∆Ø·ªöNG GI·∫¢M - ƒêi·ªÉm entry h·ª£p l√Ω:")
        entry_points['analysis'].append(f"  ‚Ä¢ Entry b·∫£o th·ªß: ${conservative_entry:.4f} (ch·ªù bounce)")
        entry_points['analysis'].append(f"  ‚Ä¢ Entry t√≠ch c·ª±c: ${aggressive_entry:.4f} (v√†o ngay)")
        entry_points['analysis'].append(f"  ‚Ä¢ Stop Loss: ${stop_loss:.4f}")
        entry_points['analysis'].append(f"  ‚Ä¢ Take Profit: ${take_profit:.4f}")
    
    # 4. Ph√¢n t√≠ch RSI ƒë·ªÉ t·ªëi ∆∞u entry
    if rsi[-1] < 15:  # T·ª´ 20 -> 15
        entry_points['analysis'].append(f"  ‚Ä¢ RSI qu√° b√°n ({rsi[-1]:.1f}) ‚Üí ∆Øu ti√™n entry b·∫£o th·ªß")
    elif rsi[-1] > 85:  # T·ª´ 80 -> 85
        entry_points['analysis'].append(f"  ‚Ä¢ RSI qu√° mua ({rsi[-1]:.1f}) ‚Üí ∆Øu ti√™n entry b·∫£o th·ªß")
    else:
        entry_points['analysis'].append(f"  ‚Ä¢ RSI trung t√≠nh ({rsi[-1]:.1f}) ‚Üí C√≥ th·ªÉ entry t√≠ch c·ª±c")
    
    # 5. Ph√¢n t√≠ch Bollinger Bands
    if current_price < bb_lower[-1]:
        entry_points['analysis'].append(f"  ‚Ä¢ Gi√° d∆∞·ªõi BB Lower ‚Üí C∆° h·ªôi entry t·ªët cho Long")
    elif current_price > bb_upper[-1]:
        entry_points['analysis'].append(f"  ‚Ä¢ Gi√° tr√™n BB Upper ‚Üí C∆° h·ªôi entry t·ªët cho Short")
    else:
        entry_points['analysis'].append(f"  ‚Ä¢ Gi√° trong BB ‚Üí Entry ·ªü gi·ªØa range")
    
    # 6. T√≠nh Risk/Reward Ratio
    if trend == 'bullish':
        risk = current_price - entry_points['stop_loss']
        reward = entry_points['take_profit'] - current_price
        rr_ratio = reward / risk if risk > 0 else 0
        entry_points['analysis'].append(f"  ‚Ä¢ Risk/Reward Ratio: 1:{rr_ratio:.2f}")
    elif trend == 'bearish':
        risk = entry_points['stop_loss'] - current_price
        reward = current_price - entry_points['take_profit']
        rr_ratio = reward / risk if risk > 0 else 0
        entry_points['analysis'].append(f"  ‚Ä¢ Risk/Reward Ratio: 1:{rr_ratio:.2f}")
    
    return entry_points

def detect_order_blocks(highs, lows, closes, volumes):
    """Ph√°t hi·ªán Order Blocks (SMC)"""
    order_blocks = []
    
    for i in range(2, len(closes) - 1):
        # Bullish Order Block (sau khi gi√° tƒÉng m·∫°nh)
        if (closes[i+1] > closes[i] * 1.02 and  # Gi√° tƒÉng > 2%
            volumes[i] > np.mean(volumes[max(0, i-10):i]) * 1.5):  # Volume cao
            
            # T√¨m v√πng order block (3-5 n·∫øn tr∆∞·ªõc ƒë√≥)
            block_start = max(0, i-5)
            block_high = max(highs[block_start:i+1])
            block_low = min(lows[block_start:i+1])
            
            order_blocks.append({
                'type': 'bullish',
                'start': block_start,
                'end': i,
                'high': block_high,
                'low': block_low,
                'strength': volumes[i] / np.mean(volumes[max(0, i-10):i])
            })
        
        # Bearish Order Block (sau khi gi√° gi·∫£m m·∫°nh)
        elif (closes[i+1] < closes[i] * 0.98 and  # Gi√° gi·∫£m > 2%
              volumes[i] > np.mean(volumes[max(0, i-10):i]) * 1.5):  # Volume cao
            
            # T√¨m v√πng order block (3-5 n·∫øn tr∆∞·ªõc ƒë√≥)
            block_start = max(0, i-5)
            block_high = max(highs[block_start:i+1])
            block_low = min(lows[block_start:i+1])
            
            order_blocks.append({
                'type': 'bearish',
                'start': block_start,
                'end': i,
                'high': block_high,
                'low': block_low,
                'strength': volumes[i] / np.mean(volumes[max(0, i-10):i])
            })
    
    return order_blocks

def detect_fair_value_gaps(highs, lows, closes):
    """Ph√°t hi·ªán Fair Value Gaps (FVG) - SMC"""
    fvgs = []
    
    for i in range(1, len(closes) - 1):
        # Bullish FVG (gap l√™n)
        if lows[i+1] > highs[i-1]:
            fvgs.append({
                'type': 'bullish',
                'position': i,
                'gap_low': highs[i-1],
                'gap_high': lows[i+1],
                'size': lows[i+1] - highs[i-1],
                'filled': False
            })
        
        # Bearish FVG (gap xu·ªëng)
        elif highs[i+1] < lows[i-1]:
            fvgs.append({
                'type': 'bearish',
                'position': i,
                'gap_low': highs[i+1],
                'gap_high': lows[i-1],
                'size': lows[i-1] - highs[i+1],
                'filled': False
            })
    
    return fvgs

def detect_liquidity_zones(highs, lows, closes, volumes):
    """Ph√°t hi·ªán Liquidity Zones (SMC)"""
    liquidity_zones = []
    
    # T√¨m c√°c swing highs v√† lows
    for i in range(2, len(closes) - 2):
        # Swing High (liquidity tr√™n)
        if (highs[i] > highs[i-1] and highs[i] > highs[i-2] and
            highs[i] > highs[i+1] and highs[i] > highs[i+2]):
            
            # Ki·ªÉm tra volume v√† wick
            wick_size = (highs[i] - max(closes[i], closes[i])) / (highs[i] - lows[i])
            if wick_size > 0.3:  # Wick d√†i
                liquidity_zones.append({
                    'type': 'liquidity_high',
                    'position': i,
                    'price': highs[i],
                    'strength': wick_size,
                    'volume': volumes[i]
                })
        
        # Swing Low (liquidity d∆∞·ªõi)
        elif (lows[i] < lows[i-1] and lows[i] < lows[i-2] and
              lows[i] < lows[i+1] and lows[i] < lows[i+2]):
            
            # Ki·ªÉm tra volume v√† wick
            wick_size = (min(closes[i], closes[i]) - lows[i]) / (highs[i] - lows[i])
            if wick_size > 0.3:  # Wick d√†i
                liquidity_zones.append({
                    'type': 'liquidity_low',
                    'position': i,
                    'price': lows[i],
                    'strength': wick_size,
                    'volume': volumes[i]
                })
    
    return liquidity_zones

def detect_mitigation_zones(highs, lows, closes):
    """Ph√°t hi·ªán Mitigation Zones (SMC) - v√πng ƒë·∫£o chi·ªÅu"""
    mitigation_zones = []
    
    for i in range(3, len(closes) - 3):
        # Bullish Mitigation (ƒë·∫£o chi·ªÅu tƒÉng)
        if (closes[i] > closes[i-1] and closes[i] > closes[i-2] and
            closes[i] > closes[i-3] and
            lows[i] < min(lows[i-3:i]) and  # T·∫°o ƒë√°y m·ªõi
            closes[i] > (highs[i-3] + lows[i-3]) / 2):  # ƒê√≥ng tr√™n midpoint
            
            mitigation_zones.append({
                'type': 'bullish_mitigation',
                'position': i,
                'price': closes[i],
                'strength': (closes[i] - lows[i]) / (highs[i] - lows[i])
            })
        
        # Bearish Mitigation (ƒë·∫£o chi·ªÅu gi·∫£m)
        elif (closes[i] < closes[i-1] and closes[i] < closes[i-2] and
              closes[i] < closes[i-3] and
              highs[i] > max(highs[i-3:i]) and  # T·∫°o ƒë·ªânh m·ªõi
              closes[i] < (highs[i-3] + lows[i-3]) / 2):  # ƒê√≥ng d∆∞·ªõi midpoint
            
            mitigation_zones.append({
                'type': 'bearish_mitigation',
                'position': i,
                'price': closes[i],
                'strength': (highs[i] - closes[i]) / (highs[i] - lows[i])
            })
    
    return mitigation_zones

def detect_price_action_patterns(highs, lows, closes, volumes):
    """Ph√°t hi·ªán c√°c m√¥ h√¨nh Price Action"""
    patterns = []
    
    # Inside Bar
    for i in range(1, len(closes)):
        if (highs[i] <= highs[i-1] and lows[i] >= lows[i-1]):
            patterns.append({
                'type': 'inside_bar',
                'position': i,
                'strength': (highs[i-1] - lows[i-1]) / (highs[i] - lows[i]) if highs[i] != lows[i] else 1
            })
    
    # Outside Bar
    for i in range(1, len(closes)):
        if (highs[i] > highs[i-1] and lows[i] < lows[i-1]):
            patterns.append({
                'type': 'outside_bar',
                'position': i,
                'strength': (highs[i] - lows[i]) / (highs[i-1] - lows[i-1]) if highs[i-1] != lows[i-1] else 1
            })
    
    # Pin Bar (Hammer/Shooting Star)
    for i in range(1, len(closes)):
        body_size = abs(closes[i] - closes[i-1])
        total_range = highs[i] - lows[i]
        
        if total_range > 0:
            body_ratio = body_size / total_range
            upper_wick = highs[i] - max(closes[i], closes[i-1])
            lower_wick = min(closes[i], closes[i-1]) - lows[i]
            
            # Pin Bar (body nh·ªè, wick d√†i)
            if body_ratio < 0.3:
                if upper_wick > body_size * 2 and lower_wick < body_size * 0.5:
                    patterns.append({
                        'type': 'pin_bar_bearish',
                        'position': i,
                        'strength': upper_wick / body_size
                    })
                elif lower_wick > body_size * 2 and upper_wick < body_size * 0.5:
                    patterns.append({
                        'type': 'pin_bar_bullish',
                        'position': i,
                        'strength': lower_wick / body_size
                    })
    
    # Engulfing Pattern
    for i in range(1, len(closes)):
        prev_body = abs(closes[i-1] - closes[i-2])
        curr_body = abs(closes[i] - closes[i-1])
        
        if curr_body > prev_body * 1.5:  # Body hi·ªán t·∫°i l·ªõn h∆°n 50%
            if closes[i] > closes[i-1] and closes[i-1] < closes[i-2]:  # Bullish Engulfing
                patterns.append({
                    'type': 'engulfing_bullish',
                    'position': i,
                    'strength': curr_body / prev_body
                })
            elif closes[i] < closes[i-1] and closes[i-1] > closes[i-2]:  # Bearish Engulfing
                patterns.append({
                    'type': 'engulfing_bearish',
                    'position': i,
                    'strength': curr_body / prev_body
                })
    
    return patterns

def analyze_smc_signals(current_price, order_blocks, fvgs, liquidity_zones, mitigation_zones):
    """Ph√¢n t√≠ch t√≠n hi·ªáu Smart Money Concepts"""
    smc_signals = {
        'order_block_signal': 'Hold',
        'fvg_signal': 'Hold',
        'liquidity_signal': 'Hold',
        'mitigation_signal': 'Hold',
        'analysis': []
    }
    
    # Ph√¢n t√≠ch Order Blocks
    nearby_bullish_ob = None
    nearby_bearish_ob = None
    
    for ob in order_blocks[-5:]:  # Ch·ªâ x√©t 5 order blocks g·∫ßn nh·∫•t
        if ob['type'] == 'bullish' and current_price >= ob['low'] and current_price <= ob['high']:
            nearby_bullish_ob = ob
        elif ob['type'] == 'bearish' and current_price >= ob['low'] and current_price <= ob['high']:
            nearby_bearish_ob = ob
    
    if nearby_bullish_ob:
        smc_signals['order_block_signal'] = 'Long'
        smc_signals['analysis'].append(f"üìà Bullish Order Block t·∫°i ${nearby_bullish_ob['low']:.4f} - ${nearby_bullish_ob['high']:.4f}")
    elif nearby_bearish_ob:
        smc_signals['order_block_signal'] = 'Short'
        smc_signals['analysis'].append(f"üìâ Bearish Order Block t·∫°i ${nearby_bearish_ob['low']:.4f} - ${nearby_bearish_ob['high']:.4f}")
    
    # Ph√¢n t√≠ch Fair Value Gaps
    nearby_fvg = None
    for fvg in fvgs[-3:]:  # Ch·ªâ x√©t 3 FVG g·∫ßn nh·∫•t
        if fvg['gap_low'] <= current_price <= fvg['gap_high']:
            nearby_fvg = fvg
            break
    
    if nearby_fvg:
        if nearby_fvg['type'] == 'bullish':
            smc_signals['fvg_signal'] = 'Long'
            smc_signals['analysis'].append(f"üìà Bullish FVG t·∫°i ${nearby_fvg['gap_low']:.4f} - ${nearby_fvg['gap_high']:.4f}")
        else:
            smc_signals['fvg_signal'] = 'Short'
            smc_signals['analysis'].append(f"üìâ Bearish FVG t·∫°i ${nearby_fvg['gap_low']:.4f} - ${nearby_fvg['gap_high']:.4f}")
    
    # Ph√¢n t√≠ch Liquidity Zones
    nearby_liquidity = None
    for lz in liquidity_zones[-3:]:  # Ch·ªâ x√©t 3 liquidity zones g·∫ßn nh·∫•t
        if abs(current_price - lz['price']) / lz['price'] < 0.02:  # Trong v√≤ng 2%
            nearby_liquidity = lz
            break
    
    if nearby_liquidity:
        if nearby_liquidity['type'] == 'liquidity_high':
            smc_signals['liquidity_signal'] = 'Short'  # C√≥ th·ªÉ b·ªã ƒë·∫£o chi·ªÅu gi·∫£m
            smc_signals['analysis'].append(f"üìâ Liquidity High t·∫°i ${nearby_liquidity['price']:.4f}")
        else:
            smc_signals['liquidity_signal'] = 'Long'  # C√≥ th·ªÉ b·ªã ƒë·∫£o chi·ªÅu tƒÉng
            smc_signals['analysis'].append(f"üìà Liquidity Low t·∫°i ${nearby_liquidity['price']:.4f}")
    
    # Ph√¢n t√≠ch Mitigation Zones
    recent_mitigation = None
    for mz in mitigation_zones[-2:]:  # Ch·ªâ x√©t 2 mitigation zones g·∫ßn nh·∫•t
        if abs(current_price - mz['price']) / mz['price'] < 0.05:  # Trong v√≤ng 5%
            recent_mitigation = mz
            break
    
    if recent_mitigation:
        if recent_mitigation['type'] == 'bullish_mitigation':
            smc_signals['mitigation_signal'] = 'Long'
            smc_signals['analysis'].append(f"üìà Bullish Mitigation t·∫°i ${recent_mitigation['price']:.4f}")
        else:
            smc_signals['mitigation_signal'] = 'Short'
            smc_signals['analysis'].append(f"üìâ Bearish Mitigation t·∫°i ${recent_mitigation['price']:.4f}")
    
    return smc_signals

def analyze_price_action_signals(current_price, price_action_patterns, highs, lows, closes):
    """Ph√¢n t√≠ch t√≠n hi·ªáu Price Action"""
    pa_signals = {
        'pattern_signal': 'Hold',
        'momentum_signal': 'Hold',
        'analysis': []
    }
    
    # Ph√¢n t√≠ch c√°c m√¥ h√¨nh Price Action g·∫ßn nh·∫•t
    recent_patterns = [p for p in price_action_patterns if p['position'] >= len(closes) - 5]
    
    bullish_patterns = 0
    bearish_patterns = 0
    
    for pattern in recent_patterns:
        if pattern['type'] in ['pin_bar_bullish', 'engulfing_bullish', 'outside_bar']:
            bullish_patterns += 1
        elif pattern['type'] in ['pin_bar_bearish', 'engulfing_bearish']:
            bearish_patterns += 1
    
    if bullish_patterns > bearish_patterns:
        pa_signals['pattern_signal'] = 'Long'
        pa_signals['analysis'].append(f"üìà {bullish_patterns} m√¥ h√¨nh Price Action bullish")
    elif bearish_patterns > bullish_patterns:
        pa_signals['pattern_signal'] = 'Short'
        pa_signals['analysis'].append(f"üìâ {bearish_patterns} m√¥ h√¨nh Price Action bearish")
    
    # Ph√¢n t√≠ch momentum
    recent_closes = closes[-5:]
    if len(recent_closes) >= 3:
        momentum = (recent_closes[-1] - recent_closes[-3]) / recent_closes[-3]
        
        if momentum > 0.02:  # TƒÉng > 2%
            pa_signals['momentum_signal'] = 'Long'
            pa_signals['analysis'].append(f"üìà Momentum tƒÉng {momentum:.2%}")
        elif momentum < -0.02:  # Gi·∫£m > 2%
            pa_signals['momentum_signal'] = 'Short'
            pa_signals['analysis'].append(f"üìâ Momentum gi·∫£m {momentum:.2%}")
    
    return pa_signals

def main():
    logger.info("B·∫Øt ƒë·∫ßu ph√¢n t√≠ch xu h∆∞·ªõng ng·∫Øn h·∫°n tr√™n Binance Spot...")
    
    # Kh·ªüi ƒë·ªông Telegram Report Scheduler
    telegram_report_scheduler()
    
    # Kh·ªüi ƒë·ªông Prediction Update Scheduler
    prediction_update_scheduler()
    
    symbols = get_usdt_symbols()
    logger.info(f"ƒê√£ ch·ªçn {len(symbols)} t√†i s·∫£n: {symbols}")
    logger.info("üìä Bao g·ªìm: Crypto (BTC, ETH, BNB) t·ª´ Binance, V√†ng & D·∫ßu t·ª´ TradingView/Investing.com")

    # Ph√¢n t√≠ch l·∫ßn ƒë·∫ßu (ch·ªâ ƒë·ªÉ ki·ªÉm tra k·∫øt n·ªëi)
    results = []
    for symbol in symbols:
        result = analyze_coin(symbol)
        if result:
            results.append(result)
            # Hi·ªÉn th·ªã lo·∫°i t√†i s·∫£n ph√π h·ª£p
            if symbol == 'XAU/USD':
                logger.info(f"üü° ƒê√£ ph√¢n t√≠ch V√†ng {symbol} th√†nh c√¥ng")
            elif symbol == 'WTI/USD':
                logger.info(f"üü† ƒê√£ ph√¢n t√≠ch D·∫ßu {symbol} th√†nh c√¥ng")
            else:
                logger.info(f"‚úÖ ƒê√£ ph√¢n t√≠ch {symbol} th√†nh c√¥ng")

    # Hi·ªÉn th·ªã th·ªëng k√™ ƒë·ªô ch√≠nh x√°c n·∫øu c√≥
    accuracy_data = get_prediction_accuracy_data()
    if accuracy_data and accuracy_data.get('overall', {}).get('total_predictions', 0) > 0:
        overall = accuracy_data['overall']
        logger.info(f"üìà Th·ªëng k√™ ƒë·ªô ch√≠nh x√°c: {overall['accuracy']:.1%} ({overall['accurate_predictions']}/{overall['total_predictions']})")
    
    logger.info(f"ü§ñ Bot ƒëang ch·∫°y v√† g·ª≠i b√°o c√°o Telegram m·ªói {TELEGRAM_REPORT_INTERVAL//3600} gi·ªù...")
    logger.info(f"üìä H·ªá th·ªëng theo d√µi d·ª± ƒëo√°n ƒëang ho·∫°t ƒë·ªông (c·∫≠p nh·∫≠t m·ªói {PREDICTION_UPDATE_INTERVAL//3600} gi·ªù)")
    logger.info(f"üì± Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng bot")
    
    # Gi·ªØ bot ch·∫°y ƒë·ªÉ Telegram scheduler ho·∫°t ƒë·ªông
    try:
        while True:
            time.sleep(1800)  # Ki·ªÉm tra m·ªói 30 ph√∫t
    except KeyboardInterrupt:
        logger.info(f"\nüõë Bot ƒë√£ d·ª´ng!")

if __name__ == "__main__":
    main()
