#!/usr/bin/env python3
"""
Script test ƒë∆°n gi·∫£n - ch·ªâ ph√¢n t√≠ch c∆° b·∫£n v√† g·ª≠i Telegram
Kh√¥ng c√≥ ML training ƒë·ªÉ tr√°nh timeout
"""

import ccxt
import numpy as np
import pandas as pd
import requests
import json
import os
from datetime import datetime
import time
import logging
from dotenv import load_dotenv
import ta

# Load environment variables
load_dotenv()

# Thi·∫øt l·∫≠p logging
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# Telegram configuration
TELEGRAM_BOT_TOKEN = os.getenv("TELEGRAM_BOT_TOKEN", "7496162935:AAGncIsO4q18cOWRGpK0vYb_5zWxYNEgWKQ")
TELEGRAM_CHAT_ID = os.getenv("TELEGRAM_CHAT_ID", "1866335373")

# Kh·ªüi t·∫°o k·∫øt n·ªëi v·ªõi Binance
exchange = ccxt.binance({
    'enableRateLimit': True,
    'options': {
        'defaultType': 'spot',
        'adjustForTimeDifference': True,
    }
})

def send_telegram_message(message):
    """G·ª≠i message v·ªÅ Telegram"""
    try:
        if TELEGRAM_BOT_TOKEN == "YOUR_BOT_TOKEN_HERE" or TELEGRAM_CHAT_ID == "YOUR_CHAT_ID_HERE":
            logger.warning("Telegram credentials ch∆∞a ƒë∆∞·ª£c c·∫•u h√¨nh!")
            return False
            
        url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
        data = {
            'chat_id': TELEGRAM_CHAT_ID,
            'text': message,
            'parse_mode': 'HTML'
        }
        
        response = requests.post(url, data=data, timeout=10)
        if response.status_code == 200:
            logger.info("‚úÖ G·ª≠i message th√†nh c√¥ng!")
            return True
        else:
            logger.error(f"‚ùå L·ªói g·ª≠i message: {response.status_code} - {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå L·ªói k·∫øt n·ªëi Telegram: {str(e)}")
        return False

def get_technical_indicators(data):
    """T√≠nh to√°n technical indicators c∆° b·∫£n"""
    try:
        df = pd.DataFrame(data)
        df.columns = ['timestamp', 'open', 'high', 'low', 'close', 'volume']
        
        # RSI
        df['rsi'] = ta.momentum.RSIIndicator(df['close']).rsi()
        
        # MACD
        macd = ta.trend.MACD(df['close'])
        df['macd'] = macd.macd()
        df['macd_signal'] = macd.macd_signal()
        
        # Bollinger Bands
        bb = ta.volatility.BollingerBands(df['close'])
        df['bb_upper'] = bb.bollinger_hband()
        df['bb_lower'] = bb.bollinger_lband()
        
        # EMA
        df['ema_20'] = ta.trend.EMAIndicator(df['close'], window=20).ema_indicator()
        df['ema_50'] = ta.trend.EMAIndicator(df['close'], window=50).ema_indicator()
        
        return df
    except Exception as e:
        logger.error(f"‚ùå L·ªói t√≠nh to√°n indicators: {e}")
        return None

def analyze_symbol_simple(symbol):
    """Ph√¢n t√≠ch symbol ƒë∆°n gi·∫£n"""
    try:
        logger.info(f"üîç ƒêang ph√¢n t√≠ch {symbol}...")
        
        # L·∫•y d·ªØ li·ªáu
        ohlcv = exchange.fetch_ohlcv(symbol, '1h', limit=100)
        if not ohlcv:
            logger.warning(f"‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c d·ªØ li·ªáu cho {symbol}")
            return None
        
        # T√≠nh to√°n indicators
        df = get_technical_indicators(ohlcv)
        if df is None:
            return None
        
        # L·∫•y gi√° tr·ªã cu·ªëi c√πng
        current_price = df['close'].iloc[-1]
        rsi = df['rsi'].iloc[-1]
        macd = df['macd'].iloc[-1]
        macd_signal = df['macd_signal'].iloc[-1]
        ema_20 = df['ema_20'].iloc[-1]
        ema_50 = df['ema_50'].iloc[-1]
        
        # Ph√¢n t√≠ch t√≠n hi·ªáu ƒë∆°n gi·∫£n
        signal = "NEUTRAL"
        if rsi < 30 and macd > macd_signal and current_price > ema_20:
            signal = "LONG"
        elif rsi > 70 and macd < macd_signal and current_price < ema_20:
            signal = "SHORT"
        
        return {
            'symbol': symbol,
            'price': current_price,
            'rsi': rsi,
            'macd': macd,
            'signal': signal,
            'ema_20': ema_20,
            'ema_50': ema_50
        }
        
    except Exception as e:
        logger.error(f"‚ùå L·ªói ph√¢n t√≠ch {symbol}: {e}")
        return None

def main():
    """Main function ƒë∆°n gi·∫£n"""
    logger.info("üöÄ B·∫Øt ƒë·∫ßu ph√¢n t√≠ch ƒë∆°n gi·∫£n...")
    
    # Ph√¢n t√≠ch BTC v√† ETH
    symbols = ['BTC/USDT', 'ETH/USDT']
    results = []
    
    for symbol in symbols:
        result = analyze_symbol_simple(symbol)
        if result:
            results.append(result)
            logger.info(f"‚úÖ ƒê√£ ph√¢n t√≠ch {symbol}")
    
    if results:
        # T·∫°o message
        current_time = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        message = f"""
ü§ñ <b>PH√ÇN T√çCH TRADING ƒê∆†N GI·∫¢N</b>

‚è∞ Th·ªùi gian: {current_time}
üåê Environment: GitHub Actions

üìä <b>K·∫æT QU·∫¢ PH√ÇN T√çCH:</b>

"""
        
        for result in results:
            message += f"""
<b>{result['symbol']}</b>
üí∞ Gi√° hi·ªán t·∫°i: ${result['price']:,.2f}
üìà RSI: {result['rsi']:.2f}
üìä MACD: {result['macd']:.4f}
üéØ T√≠n hi·ªáu: <b>{result['signal']}</b>
üìâ EMA20: ${result['ema_20']:,.2f}
üìâ EMA50: ${result['ema_50']:,.2f}

"""
        
        message += """
‚úÖ <b>Ph√¢n t√≠ch ho√†n th√†nh!</b>
üì± Bot ƒëang ho·∫°t ƒë·ªông b√¨nh th∆∞·ªùng
"""
        
        # G·ª≠i v·ªÅ Telegram
        success = send_telegram_message(message)
        
        if success:
            logger.info("üéâ Ph√¢n t√≠ch v√† g·ª≠i Telegram th√†nh c√¥ng!")
        else:
            logger.error("‚ùå L·ªói g·ª≠i Telegram")
    else:
        logger.error("‚ùå Kh√¥ng c√≥ k·∫øt qu·∫£ ph√¢n t√≠ch")
    
    logger.info("üèÅ Ho√†n th√†nh!")

if __name__ == "__main__":
    main()
